# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project, GKE_EMAIL with the service account email, GKE_SA_B64 with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, REGISTRY_HOSTNAME and DEPLOYMENT_NAME environment variables (below).

# REF: https://docs.github.com/en/actions/guides/deploying-to-google-kubernetes-engine

name: Build and Deploy to GKE

on:
  push:
    branches:
      - master

# Environment variables available to all jobs and steps in this workflow
env:
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_EMAIL: ${{ secrets.GKE_EMAIL }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: europe-west1-b
  GKE_CLUSTER: talkiewalkie-main
  IMAGE: talkiewalkie-back
  REGISTRY_HOSTNAME: gcr.io
  DEPLOYMENT_NAME: talkiewalkie-back

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      # Setup gcloud CLI
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '336.0.0'
          service_account_email: ${{ secrets.GKE_EMAIL }}
          service_account_key: ${{ secrets.GKE_SA_B64 }}

      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |
          # Set up docker to authenticate
          # via gcloud command-line tool.
          gcloud auth configure-docker

      - name: Test deps
        run: |
          # GO INSTALLL
          curl -LO https://golang.org/dl/go1.16.3.linux-amd64.tar.gz
          rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.16.3.linux-amd64.tar.gz
          export PATH=$PATH:/usr/local/go/bin

          # POSTGRES - https://www.postgresql.org/download/linux/ubuntu/
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update && sudo apt-get -y install postgresql

          # TEST DB
          createdb talkiewalkie-test

      - name: Test
        run: |
          curl -LO https://golang.org/dl/go1.16.3.linux-amd64.tar.gz
          rm -rf /usr/local/go && tar -C /usr/local -xzf go1.16.3.linux-amd64.tar.gz
          export PATH=$PATH:/usr/local/go/bin
          go test ./repository

      # Build the Docker image
      - name: Build
        run: |
          ./build_back.sh

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |
          docker push $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:$GITHUB_SHA

      # Set up kustomize
#      - name: Set up Kustomize
#        run: |
#          curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
#          chmod u+x ./kustomize

      # Deploy the Docker image to the GKE cluster
#      - name: Deploy
#        run: |
#          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GKE_PROJECT
#          ./kustomize edit set image $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:${GITHUB_SHA}
#          ./kustomize build . | kubectl apply -f -
#          kubectl rollout status deployment/$DEPLOYMENT_NAME
#          kubectl get services -o wide