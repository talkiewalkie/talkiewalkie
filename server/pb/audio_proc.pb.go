// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: audio_proc.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FormatAndCompressInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content  []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	FileName string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`
	MimeType string `protobuf:"bytes,3,opt,name=mimeType,proto3" json:"mimeType,omitempty"`
}

func (x *FormatAndCompressInput) Reset() {
	*x = FormatAndCompressInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatAndCompressInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatAndCompressInput) ProtoMessage() {}

func (x *FormatAndCompressInput) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatAndCompressInput.ProtoReflect.Descriptor instead.
func (*FormatAndCompressInput) Descriptor() ([]byte, []int) {
	return file_audio_proc_proto_rawDescGZIP(), []int{0}
}

func (x *FormatAndCompressInput) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *FormatAndCompressInput) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FormatAndCompressInput) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

type FormatAndCompressOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *FormatAndCompressOutput) Reset() {
	*x = FormatAndCompressOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audio_proc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatAndCompressOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatAndCompressOutput) ProtoMessage() {}

func (x *FormatAndCompressOutput) ProtoReflect() protoreflect.Message {
	mi := &file_audio_proc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatAndCompressOutput.ProtoReflect.Descriptor instead.
func (*FormatAndCompressOutput) Descriptor() ([]byte, []int) {
	return file_audio_proc_proto_rawDescGZIP(), []int{1}
}

func (x *FormatAndCompressOutput) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

var File_audio_proc_proto protoreflect.FileDescriptor

var file_audio_proc_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x22, 0x6a, 0x0a,
	0x16, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x33, 0x0a, 0x17, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x32, 0x6b,
	0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a,
	0x11, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x70, 0x72, 0x6f,
	0x63, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x42, 0x29, 0x5a, 0x27, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x61, 0x6c, 0x6b, 0x69, 0x65,
	0x77, 0x61, 0x6c, 0x6b, 0x69, 0x65, 0x2f, 0x74, 0x61, 0x6c, 0x6b, 0x69, 0x65, 0x77, 0x61, 0x6c,
	0x6b, 0x69, 0x65, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_audio_proc_proto_rawDescOnce sync.Once
	file_audio_proc_proto_rawDescData = file_audio_proc_proto_rawDesc
)

func file_audio_proc_proto_rawDescGZIP() []byte {
	file_audio_proc_proto_rawDescOnce.Do(func() {
		file_audio_proc_proto_rawDescData = protoimpl.X.CompressGZIP(file_audio_proc_proto_rawDescData)
	})
	return file_audio_proc_proto_rawDescData
}

var file_audio_proc_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_audio_proc_proto_goTypes = []interface{}{
	(*FormatAndCompressInput)(nil),  // 0: audioproc.FormatAndCompressInput
	(*FormatAndCompressOutput)(nil), // 1: audioproc.FormatAndCompressOutput
}
var file_audio_proc_proto_depIdxs = []int32{
	0, // 0: audioproc.Compression.FormatAndCompress:input_type -> audioproc.FormatAndCompressInput
	1, // 1: audioproc.Compression.FormatAndCompress:output_type -> audioproc.FormatAndCompressOutput
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_audio_proc_proto_init() }
func file_audio_proc_proto_init() {
	if File_audio_proc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_audio_proc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormatAndCompressInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audio_proc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormatAndCompressOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_audio_proc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_audio_proc_proto_goTypes,
		DependencyIndexes: file_audio_proc_proto_depIdxs,
		MessageInfos:      file_audio_proc_proto_msgTypes,
	}.Build()
	File_audio_proc_proto = out.File
	file_audio_proc_proto_rawDesc = nil
	file_audio_proc_proto_goTypes = nil
	file_audio_proc_proto_depIdxs = nil
}
