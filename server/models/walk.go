// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/satori/go.uuid"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types/pgeo"
	"github.com/volatiletech/strmangle"
)

// Walk is an object representing the database table.
type Walk struct {
	ID         int        `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	UUID       uuid.UUID  `db:"uuid" boil:"uuid" json:"uuid" toml:"uuid" yaml:"uuid"`
	Title      string     `db:"title" boil:"title" json:"title" toml:"title" yaml:"title"`
	CoverID    null.Int   `db:"cover_id" boil:"cover_id" json:"cover_id,omitempty" toml:"cover_id" yaml:"cover_id,omitempty"`
	AudioID    null.Int   `db:"audio_id" boil:"audio_id" json:"audio_id,omitempty" toml:"audio_id" yaml:"audio_id,omitempty"`
	AuthorID   int        `db:"author_id" boil:"author_id" json:"author_id" toml:"author_id" yaml:"author_id"`
	CreatedAt  time.Time  `db:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	StartPoint pgeo.Point `db:"start_point" boil:"start_point" json:"start_point" toml:"start_point" yaml:"start_point"`
	EndPoint   pgeo.Point `db:"end_point" boil:"end_point" json:"end_point" toml:"end_point" yaml:"end_point"`

	R *walkR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L walkL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WalkColumns = struct {
	ID         string
	UUID       string
	Title      string
	CoverID    string
	AudioID    string
	AuthorID   string
	CreatedAt  string
	StartPoint string
	EndPoint   string
}{
	ID:         "id",
	UUID:       "uuid",
	Title:      "title",
	CoverID:    "cover_id",
	AudioID:    "audio_id",
	AuthorID:   "author_id",
	CreatedAt:  "created_at",
	StartPoint: "start_point",
	EndPoint:   "end_point",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperpgeo_Point struct{ field string }

func (w whereHelperpgeo_Point) EQ(x pgeo.Point) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperpgeo_Point) NEQ(x pgeo.Point) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperpgeo_Point) LT(x pgeo.Point) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperpgeo_Point) LTE(x pgeo.Point) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperpgeo_Point) GT(x pgeo.Point) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperpgeo_Point) GTE(x pgeo.Point) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var WalkWhere = struct {
	ID         whereHelperint
	UUID       whereHelperuuid_UUID
	Title      whereHelperstring
	CoverID    whereHelpernull_Int
	AudioID    whereHelpernull_Int
	AuthorID   whereHelperint
	CreatedAt  whereHelpertime_Time
	StartPoint whereHelperpgeo_Point
	EndPoint   whereHelperpgeo_Point
}{
	ID:         whereHelperint{field: "\"walk\".\"id\""},
	UUID:       whereHelperuuid_UUID{field: "\"walk\".\"uuid\""},
	Title:      whereHelperstring{field: "\"walk\".\"title\""},
	CoverID:    whereHelpernull_Int{field: "\"walk\".\"cover_id\""},
	AudioID:    whereHelpernull_Int{field: "\"walk\".\"audio_id\""},
	AuthorID:   whereHelperint{field: "\"walk\".\"author_id\""},
	CreatedAt:  whereHelpertime_Time{field: "\"walk\".\"created_at\""},
	StartPoint: whereHelperpgeo_Point{field: "\"walk\".\"start_point\""},
	EndPoint:   whereHelperpgeo_Point{field: "\"walk\".\"end_point\""},
}

// WalkRels is where relationship names are stored.
var WalkRels = struct {
	Audio     string
	Author    string
	Cover     string
	UserWalks string
}{
	Audio:     "Audio",
	Author:    "Author",
	Cover:     "Cover",
	UserWalks: "UserWalks",
}

// walkR is where relationships are stored.
type walkR struct {
	Audio     *Asset        `db:"Audio" boil:"Audio" json:"Audio" toml:"Audio" yaml:"Audio"`
	Author    *User         `db:"Author" boil:"Author" json:"Author" toml:"Author" yaml:"Author"`
	Cover     *Asset        `db:"Cover" boil:"Cover" json:"Cover" toml:"Cover" yaml:"Cover"`
	UserWalks UserWalkSlice `db:"UserWalks" boil:"UserWalks" json:"UserWalks" toml:"UserWalks" yaml:"UserWalks"`
}

// NewStruct creates a new relationship struct
func (*walkR) NewStruct() *walkR {
	return &walkR{}
}

// walkL is where Load methods for each relationship are stored.
type walkL struct{}

var (
	walkAllColumns            = []string{"id", "uuid", "title", "cover_id", "audio_id", "author_id", "created_at", "start_point", "end_point"}
	walkColumnsWithoutDefault = []string{"title", "cover_id", "audio_id", "author_id", "start_point", "end_point"}
	walkColumnsWithDefault    = []string{"id", "uuid", "created_at"}
	walkPrimaryKeyColumns     = []string{"id"}
)

type (
	// WalkSlice is an alias for a slice of pointers to Walk.
	// This should generally be used opposed to []Walk.
	WalkSlice []*Walk
	// WalkHook is the signature for custom Walk hook methods
	WalkHook func(context.Context, boil.ContextExecutor, *Walk) error

	walkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	walkType                 = reflect.TypeOf(&Walk{})
	walkMapping              = queries.MakeStructMapping(walkType)
	walkPrimaryKeyMapping, _ = queries.BindMapping(walkType, walkMapping, walkPrimaryKeyColumns)
	walkInsertCacheMut       sync.RWMutex
	walkInsertCache          = make(map[string]insertCache)
	walkUpdateCacheMut       sync.RWMutex
	walkUpdateCache          = make(map[string]updateCache)
	walkUpsertCacheMut       sync.RWMutex
	walkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var walkBeforeInsertHooks []WalkHook
var walkBeforeUpdateHooks []WalkHook
var walkBeforeDeleteHooks []WalkHook
var walkBeforeUpsertHooks []WalkHook

var walkAfterInsertHooks []WalkHook
var walkAfterSelectHooks []WalkHook
var walkAfterUpdateHooks []WalkHook
var walkAfterDeleteHooks []WalkHook
var walkAfterUpsertHooks []WalkHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Walk) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walkBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Walk) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walkBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Walk) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walkBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Walk) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walkBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Walk) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walkAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Walk) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walkAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Walk) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walkAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Walk) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walkAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Walk) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walkAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWalkHook registers your hook function for all future operations.
func AddWalkHook(hookPoint boil.HookPoint, walkHook WalkHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		walkBeforeInsertHooks = append(walkBeforeInsertHooks, walkHook)
	case boil.BeforeUpdateHook:
		walkBeforeUpdateHooks = append(walkBeforeUpdateHooks, walkHook)
	case boil.BeforeDeleteHook:
		walkBeforeDeleteHooks = append(walkBeforeDeleteHooks, walkHook)
	case boil.BeforeUpsertHook:
		walkBeforeUpsertHooks = append(walkBeforeUpsertHooks, walkHook)
	case boil.AfterInsertHook:
		walkAfterInsertHooks = append(walkAfterInsertHooks, walkHook)
	case boil.AfterSelectHook:
		walkAfterSelectHooks = append(walkAfterSelectHooks, walkHook)
	case boil.AfterUpdateHook:
		walkAfterUpdateHooks = append(walkAfterUpdateHooks, walkHook)
	case boil.AfterDeleteHook:
		walkAfterDeleteHooks = append(walkAfterDeleteHooks, walkHook)
	case boil.AfterUpsertHook:
		walkAfterUpsertHooks = append(walkAfterUpsertHooks, walkHook)
	}
}

// One returns a single walk record from the query.
func (q walkQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Walk, error) {
	o := &Walk{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for walk")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Walk records from the query.
func (q walkQuery) All(ctx context.Context, exec boil.ContextExecutor) (WalkSlice, error) {
	var o []*Walk

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Walk slice")
	}

	if len(walkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Walk records in the query.
func (q walkQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count walk rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q walkQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if walk exists")
	}

	return count > 0, nil
}

// Audio pointed to by the foreign key.
func (o *Walk) Audio(mods ...qm.QueryMod) assetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AudioID),
	}

	queryMods = append(queryMods, mods...)

	query := Assets(queryMods...)
	queries.SetFrom(query.Query, "\"asset\"")

	return query
}

// Author pointed to by the foreign key.
func (o *Walk) Author(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AuthorID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"user\"")

	return query
}

// Cover pointed to by the foreign key.
func (o *Walk) Cover(mods ...qm.QueryMod) assetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CoverID),
	}

	queryMods = append(queryMods, mods...)

	query := Assets(queryMods...)
	queries.SetFrom(query.Query, "\"asset\"")

	return query
}

// UserWalks retrieves all the user_walk's UserWalks with an executor.
func (o *Walk) UserWalks(mods ...qm.QueryMod) userWalkQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_walk\".\"walk_id\"=?", o.ID),
	)

	query := UserWalks(queryMods...)
	queries.SetFrom(query.Query, "\"user_walk\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_walk\".*"})
	}

	return query
}

// LoadAudio allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (walkL) LoadAudio(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWalk interface{}, mods queries.Applicator) error {
	var slice []*Walk
	var object *Walk

	if singular {
		object = maybeWalk.(*Walk)
	} else {
		slice = *maybeWalk.(*[]*Walk)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &walkR{}
		}
		if !queries.IsNil(object.AudioID) {
			args = append(args, object.AudioID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &walkR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AudioID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AudioID) {
				args = append(args, obj.AudioID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`asset`),
		qm.WhereIn(`asset.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Asset")
	}

	var resultSlice []*Asset
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Asset")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for asset")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for asset")
	}

	if len(walkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Audio = foreign
		if foreign.R == nil {
			foreign.R = &assetR{}
		}
		foreign.R.AudioWalks = append(foreign.R.AudioWalks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AudioID, foreign.ID) {
				local.R.Audio = foreign
				if foreign.R == nil {
					foreign.R = &assetR{}
				}
				foreign.R.AudioWalks = append(foreign.R.AudioWalks, local)
				break
			}
		}
	}

	return nil
}

// LoadAuthor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (walkL) LoadAuthor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWalk interface{}, mods queries.Applicator) error {
	var slice []*Walk
	var object *Walk

	if singular {
		object = maybeWalk.(*Walk)
	} else {
		slice = *maybeWalk.(*[]*Walk)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &walkR{}
		}
		args = append(args, object.AuthorID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &walkR{}
			}

			for _, a := range args {
				if a == obj.AuthorID {
					continue Outer
				}
			}

			args = append(args, obj.AuthorID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(walkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Author = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.AuthorWalks = append(foreign.R.AuthorWalks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AuthorID == foreign.ID {
				local.R.Author = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.AuthorWalks = append(foreign.R.AuthorWalks, local)
				break
			}
		}
	}

	return nil
}

// LoadCover allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (walkL) LoadCover(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWalk interface{}, mods queries.Applicator) error {
	var slice []*Walk
	var object *Walk

	if singular {
		object = maybeWalk.(*Walk)
	} else {
		slice = *maybeWalk.(*[]*Walk)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &walkR{}
		}
		if !queries.IsNil(object.CoverID) {
			args = append(args, object.CoverID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &walkR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CoverID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CoverID) {
				args = append(args, obj.CoverID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`asset`),
		qm.WhereIn(`asset.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Asset")
	}

	var resultSlice []*Asset
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Asset")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for asset")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for asset")
	}

	if len(walkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Cover = foreign
		if foreign.R == nil {
			foreign.R = &assetR{}
		}
		foreign.R.CoverWalks = append(foreign.R.CoverWalks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CoverID, foreign.ID) {
				local.R.Cover = foreign
				if foreign.R == nil {
					foreign.R = &assetR{}
				}
				foreign.R.CoverWalks = append(foreign.R.CoverWalks, local)
				break
			}
		}
	}

	return nil
}

// LoadUserWalks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (walkL) LoadUserWalks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWalk interface{}, mods queries.Applicator) error {
	var slice []*Walk
	var object *Walk

	if singular {
		object = maybeWalk.(*Walk)
	} else {
		slice = *maybeWalk.(*[]*Walk)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &walkR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &walkR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_walk`),
		qm.WhereIn(`user_walk.walk_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_walk")
	}

	var resultSlice []*UserWalk
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_walk")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_walk")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_walk")
	}

	if len(userWalkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserWalks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userWalkR{}
			}
			foreign.R.Walk = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.WalkID {
				local.R.UserWalks = append(local.R.UserWalks, foreign)
				if foreign.R == nil {
					foreign.R = &userWalkR{}
				}
				foreign.R.Walk = local
				break
			}
		}
	}

	return nil
}

// SetAudio of the walk to the related item.
// Sets o.R.Audio to related.
// Adds o to related.R.AudioWalks.
func (o *Walk) SetAudio(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Asset) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"walk\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"audio_id"}),
		strmangle.WhereClause("\"", "\"", 2, walkPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AudioID, related.ID)
	if o.R == nil {
		o.R = &walkR{
			Audio: related,
		}
	} else {
		o.R.Audio = related
	}

	if related.R == nil {
		related.R = &assetR{
			AudioWalks: WalkSlice{o},
		}
	} else {
		related.R.AudioWalks = append(related.R.AudioWalks, o)
	}

	return nil
}

// RemoveAudio relationship.
// Sets o.R.Audio to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Walk) RemoveAudio(ctx context.Context, exec boil.ContextExecutor, related *Asset) error {
	var err error

	queries.SetScanner(&o.AudioID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("audio_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Audio = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AudioWalks {
		if queries.Equal(o.AudioID, ri.AudioID) {
			continue
		}

		ln := len(related.R.AudioWalks)
		if ln > 1 && i < ln-1 {
			related.R.AudioWalks[i] = related.R.AudioWalks[ln-1]
		}
		related.R.AudioWalks = related.R.AudioWalks[:ln-1]
		break
	}
	return nil
}

// SetAuthor of the walk to the related item.
// Sets o.R.Author to related.
// Adds o to related.R.AuthorWalks.
func (o *Walk) SetAuthor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"walk\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"author_id"}),
		strmangle.WhereClause("\"", "\"", 2, walkPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AuthorID = related.ID
	if o.R == nil {
		o.R = &walkR{
			Author: related,
		}
	} else {
		o.R.Author = related
	}

	if related.R == nil {
		related.R = &userR{
			AuthorWalks: WalkSlice{o},
		}
	} else {
		related.R.AuthorWalks = append(related.R.AuthorWalks, o)
	}

	return nil
}

// SetCover of the walk to the related item.
// Sets o.R.Cover to related.
// Adds o to related.R.CoverWalks.
func (o *Walk) SetCover(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Asset) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"walk\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"cover_id"}),
		strmangle.WhereClause("\"", "\"", 2, walkPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CoverID, related.ID)
	if o.R == nil {
		o.R = &walkR{
			Cover: related,
		}
	} else {
		o.R.Cover = related
	}

	if related.R == nil {
		related.R = &assetR{
			CoverWalks: WalkSlice{o},
		}
	} else {
		related.R.CoverWalks = append(related.R.CoverWalks, o)
	}

	return nil
}

// RemoveCover relationship.
// Sets o.R.Cover to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Walk) RemoveCover(ctx context.Context, exec boil.ContextExecutor, related *Asset) error {
	var err error

	queries.SetScanner(&o.CoverID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("cover_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Cover = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CoverWalks {
		if queries.Equal(o.CoverID, ri.CoverID) {
			continue
		}

		ln := len(related.R.CoverWalks)
		if ln > 1 && i < ln-1 {
			related.R.CoverWalks[i] = related.R.CoverWalks[ln-1]
		}
		related.R.CoverWalks = related.R.CoverWalks[:ln-1]
		break
	}
	return nil
}

// AddUserWalks adds the given related objects to the existing relationships
// of the walk, optionally inserting them as new records.
// Appends related to o.R.UserWalks.
// Sets related.R.Walk appropriately.
func (o *Walk) AddUserWalks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserWalk) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WalkID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_walk\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"walk_id"}),
				strmangle.WhereClause("\"", "\"", 2, userWalkPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WalkID = o.ID
		}
	}

	if o.R == nil {
		o.R = &walkR{
			UserWalks: related,
		}
	} else {
		o.R.UserWalks = append(o.R.UserWalks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userWalkR{
				Walk: o,
			}
		} else {
			rel.R.Walk = o
		}
	}
	return nil
}

// Walks retrieves all the records using an executor.
func Walks(mods ...qm.QueryMod) walkQuery {
	mods = append(mods, qm.From("\"walk\""))
	return walkQuery{NewQuery(mods...)}
}

// FindWalk retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWalk(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Walk, error) {
	walkObj := &Walk{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"walk\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, walkObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from walk")
	}

	return walkObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Walk) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no walk provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(walkColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	walkInsertCacheMut.RLock()
	cache, cached := walkInsertCache[key]
	walkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			walkAllColumns,
			walkColumnsWithDefault,
			walkColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(walkType, walkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(walkType, walkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"walk\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"walk\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into walk")
	}

	if !cached {
		walkInsertCacheMut.Lock()
		walkInsertCache[key] = cache
		walkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Walk.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Walk) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	walkUpdateCacheMut.RLock()
	cache, cached := walkUpdateCache[key]
	walkUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			walkAllColumns,
			walkPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update walk, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"walk\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, walkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(walkType, walkMapping, append(wl, walkPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update walk row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for walk")
	}

	if !cached {
		walkUpdateCacheMut.Lock()
		walkUpdateCache[key] = cache
		walkUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q walkQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for walk")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for walk")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WalkSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), walkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"walk\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, walkPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in walk slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all walk")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Walk) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no walk provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(walkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	walkUpsertCacheMut.RLock()
	cache, cached := walkUpsertCache[key]
	walkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			walkAllColumns,
			walkColumnsWithDefault,
			walkColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			walkAllColumns,
			walkPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert walk, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(walkPrimaryKeyColumns))
			copy(conflict, walkPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"walk\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(walkType, walkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(walkType, walkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert walk")
	}

	if !cached {
		walkUpsertCacheMut.Lock()
		walkUpsertCache[key] = cache
		walkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Walk record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Walk) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Walk provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), walkPrimaryKeyMapping)
	sql := "DELETE FROM \"walk\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from walk")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for walk")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q walkQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no walkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from walk")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for walk")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WalkSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(walkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), walkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"walk\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, walkPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from walk slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for walk")
	}

	if len(walkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Walk) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWalk(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WalkSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WalkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), walkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"walk\".* FROM \"walk\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, walkPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WalkSlice")
	}

	*o = slice

	return nil
}

// WalkExists checks if the Walk row exists.
func WalkExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"walk\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if walk exists")
	}

	return exists, nil
}
