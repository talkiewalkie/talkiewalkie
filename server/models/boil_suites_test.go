// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Assets", testAssets)
	t.Run("Conversations", testConversations)
	t.Run("Events", testEvents)
	t.Run("Messages", testMessages)
	t.Run("Users", testUsers)
	t.Run("UserConversations", testUserConversations)
}

func TestDelete(t *testing.T) {
	t.Run("Assets", testAssetsDelete)
	t.Run("Conversations", testConversationsDelete)
	t.Run("Events", testEventsDelete)
	t.Run("Messages", testMessagesDelete)
	t.Run("Users", testUsersDelete)
	t.Run("UserConversations", testUserConversationsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Assets", testAssetsQueryDeleteAll)
	t.Run("Conversations", testConversationsQueryDeleteAll)
	t.Run("Events", testEventsQueryDeleteAll)
	t.Run("Messages", testMessagesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("UserConversations", testUserConversationsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Assets", testAssetsSliceDeleteAll)
	t.Run("Conversations", testConversationsSliceDeleteAll)
	t.Run("Events", testEventsSliceDeleteAll)
	t.Run("Messages", testMessagesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("UserConversations", testUserConversationsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Assets", testAssetsExists)
	t.Run("Conversations", testConversationsExists)
	t.Run("Events", testEventsExists)
	t.Run("Messages", testMessagesExists)
	t.Run("Users", testUsersExists)
	t.Run("UserConversations", testUserConversationsExists)
}

func TestFind(t *testing.T) {
	t.Run("Assets", testAssetsFind)
	t.Run("Conversations", testConversationsFind)
	t.Run("Events", testEventsFind)
	t.Run("Messages", testMessagesFind)
	t.Run("Users", testUsersFind)
	t.Run("UserConversations", testUserConversationsFind)
}

func TestBind(t *testing.T) {
	t.Run("Assets", testAssetsBind)
	t.Run("Conversations", testConversationsBind)
	t.Run("Events", testEventsBind)
	t.Run("Messages", testMessagesBind)
	t.Run("Users", testUsersBind)
	t.Run("UserConversations", testUserConversationsBind)
}

func TestOne(t *testing.T) {
	t.Run("Assets", testAssetsOne)
	t.Run("Conversations", testConversationsOne)
	t.Run("Events", testEventsOne)
	t.Run("Messages", testMessagesOne)
	t.Run("Users", testUsersOne)
	t.Run("UserConversations", testUserConversationsOne)
}

func TestAll(t *testing.T) {
	t.Run("Assets", testAssetsAll)
	t.Run("Conversations", testConversationsAll)
	t.Run("Events", testEventsAll)
	t.Run("Messages", testMessagesAll)
	t.Run("Users", testUsersAll)
	t.Run("UserConversations", testUserConversationsAll)
}

func TestCount(t *testing.T) {
	t.Run("Assets", testAssetsCount)
	t.Run("Conversations", testConversationsCount)
	t.Run("Events", testEventsCount)
	t.Run("Messages", testMessagesCount)
	t.Run("Users", testUsersCount)
	t.Run("UserConversations", testUserConversationsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Assets", testAssetsHooks)
	t.Run("Conversations", testConversationsHooks)
	t.Run("Events", testEventsHooks)
	t.Run("Messages", testMessagesHooks)
	t.Run("Users", testUsersHooks)
	t.Run("UserConversations", testUserConversationsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Assets", testAssetsInsert)
	t.Run("Assets", testAssetsInsertWhitelist)
	t.Run("Conversations", testConversationsInsert)
	t.Run("Conversations", testConversationsInsertWhitelist)
	t.Run("Events", testEventsInsert)
	t.Run("Events", testEventsInsertWhitelist)
	t.Run("Messages", testMessagesInsert)
	t.Run("Messages", testMessagesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("UserConversations", testUserConversationsInsert)
	t.Run("UserConversations", testUserConversationsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("EventToConversationUsingConversation", testEventToOneConversationUsingConversation)
	t.Run("EventToMessageUsingMessage", testEventToOneMessageUsingMessage)
	t.Run("EventToUserUsingRecipient", testEventToOneUserUsingRecipient)
	t.Run("MessageToUserUsingAuthor", testMessageToOneUserUsingAuthor)
	t.Run("MessageToConversationUsingConversation", testMessageToOneConversationUsingConversation)
	t.Run("MessageToAssetUsingRawAudio", testMessageToOneAssetUsingRawAudio)
	t.Run("UserToAssetUsingProfilePictureAsset", testUserToOneAssetUsingProfilePictureAsset)
	t.Run("UserConversationToConversationUsingConversation", testUserConversationToOneConversationUsingConversation)
	t.Run("UserConversationToUserUsingUser", testUserConversationToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AssetToRawAudioMessages", testAssetToManyRawAudioMessages)
	t.Run("AssetToProfilePictureUsers", testAssetToManyProfilePictureUsers)
	t.Run("ConversationToEvents", testConversationToManyEvents)
	t.Run("ConversationToMessages", testConversationToManyMessages)
	t.Run("ConversationToUserConversations", testConversationToManyUserConversations)
	t.Run("MessageToEvents", testMessageToManyEvents)
	t.Run("UserToRecipientEvents", testUserToManyRecipientEvents)
	t.Run("UserToAuthorMessages", testUserToManyAuthorMessages)
	t.Run("UserToUserConversations", testUserToManyUserConversations)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("EventToConversationUsingEvents", testEventToOneSetOpConversationUsingConversation)
	t.Run("EventToMessageUsingEvents", testEventToOneSetOpMessageUsingMessage)
	t.Run("EventToUserUsingRecipientEvents", testEventToOneSetOpUserUsingRecipient)
	t.Run("MessageToUserUsingAuthorMessages", testMessageToOneSetOpUserUsingAuthor)
	t.Run("MessageToConversationUsingMessages", testMessageToOneSetOpConversationUsingConversation)
	t.Run("MessageToAssetUsingRawAudioMessages", testMessageToOneSetOpAssetUsingRawAudio)
	t.Run("UserToAssetUsingProfilePictureUsers", testUserToOneSetOpAssetUsingProfilePictureAsset)
	t.Run("UserConversationToConversationUsingUserConversations", testUserConversationToOneSetOpConversationUsingConversation)
	t.Run("UserConversationToUserUsingUserConversations", testUserConversationToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("EventToConversationUsingEvents", testEventToOneRemoveOpConversationUsingConversation)
	t.Run("EventToMessageUsingEvents", testEventToOneRemoveOpMessageUsingMessage)
	t.Run("MessageToUserUsingAuthorMessages", testMessageToOneRemoveOpUserUsingAuthor)
	t.Run("MessageToAssetUsingRawAudioMessages", testMessageToOneRemoveOpAssetUsingRawAudio)
	t.Run("UserToAssetUsingProfilePictureUsers", testUserToOneRemoveOpAssetUsingProfilePictureAsset)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AssetToRawAudioMessages", testAssetToManyAddOpRawAudioMessages)
	t.Run("AssetToProfilePictureUsers", testAssetToManyAddOpProfilePictureUsers)
	t.Run("ConversationToEvents", testConversationToManyAddOpEvents)
	t.Run("ConversationToMessages", testConversationToManyAddOpMessages)
	t.Run("ConversationToUserConversations", testConversationToManyAddOpUserConversations)
	t.Run("MessageToEvents", testMessageToManyAddOpEvents)
	t.Run("UserToRecipientEvents", testUserToManyAddOpRecipientEvents)
	t.Run("UserToAuthorMessages", testUserToManyAddOpAuthorMessages)
	t.Run("UserToUserConversations", testUserToManyAddOpUserConversations)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("AssetToRawAudioMessages", testAssetToManySetOpRawAudioMessages)
	t.Run("AssetToProfilePictureUsers", testAssetToManySetOpProfilePictureUsers)
	t.Run("ConversationToEvents", testConversationToManySetOpEvents)
	t.Run("MessageToEvents", testMessageToManySetOpEvents)
	t.Run("UserToAuthorMessages", testUserToManySetOpAuthorMessages)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("AssetToRawAudioMessages", testAssetToManyRemoveOpRawAudioMessages)
	t.Run("AssetToProfilePictureUsers", testAssetToManyRemoveOpProfilePictureUsers)
	t.Run("ConversationToEvents", testConversationToManyRemoveOpEvents)
	t.Run("MessageToEvents", testMessageToManyRemoveOpEvents)
	t.Run("UserToAuthorMessages", testUserToManyRemoveOpAuthorMessages)
}

func TestReload(t *testing.T) {
	t.Run("Assets", testAssetsReload)
	t.Run("Conversations", testConversationsReload)
	t.Run("Events", testEventsReload)
	t.Run("Messages", testMessagesReload)
	t.Run("Users", testUsersReload)
	t.Run("UserConversations", testUserConversationsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Assets", testAssetsReloadAll)
	t.Run("Conversations", testConversationsReloadAll)
	t.Run("Events", testEventsReloadAll)
	t.Run("Messages", testMessagesReloadAll)
	t.Run("Users", testUsersReloadAll)
	t.Run("UserConversations", testUserConversationsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Assets", testAssetsSelect)
	t.Run("Conversations", testConversationsSelect)
	t.Run("Events", testEventsSelect)
	t.Run("Messages", testMessagesSelect)
	t.Run("Users", testUsersSelect)
	t.Run("UserConversations", testUserConversationsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Assets", testAssetsUpdate)
	t.Run("Conversations", testConversationsUpdate)
	t.Run("Events", testEventsUpdate)
	t.Run("Messages", testMessagesUpdate)
	t.Run("Users", testUsersUpdate)
	t.Run("UserConversations", testUserConversationsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Assets", testAssetsSliceUpdateAll)
	t.Run("Conversations", testConversationsSliceUpdateAll)
	t.Run("Events", testEventsSliceUpdateAll)
	t.Run("Messages", testMessagesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("UserConversations", testUserConversationsSliceUpdateAll)
}
