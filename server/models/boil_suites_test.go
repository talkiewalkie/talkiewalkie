// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Assets", testAssets)
	t.Run("Users", testUsers)
	t.Run("UserWalks", testUserWalks)
	t.Run("Walks", testWalks)
}

func TestDelete(t *testing.T) {
	t.Run("Assets", testAssetsDelete)
	t.Run("Users", testUsersDelete)
	t.Run("UserWalks", testUserWalksDelete)
	t.Run("Walks", testWalksDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Assets", testAssetsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("UserWalks", testUserWalksQueryDeleteAll)
	t.Run("Walks", testWalksQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Assets", testAssetsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("UserWalks", testUserWalksSliceDeleteAll)
	t.Run("Walks", testWalksSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Assets", testAssetsExists)
	t.Run("Users", testUsersExists)
	t.Run("UserWalks", testUserWalksExists)
	t.Run("Walks", testWalksExists)
}

func TestFind(t *testing.T) {
	t.Run("Assets", testAssetsFind)
	t.Run("Users", testUsersFind)
	t.Run("UserWalks", testUserWalksFind)
	t.Run("Walks", testWalksFind)
}

func TestBind(t *testing.T) {
	t.Run("Assets", testAssetsBind)
	t.Run("Users", testUsersBind)
	t.Run("UserWalks", testUserWalksBind)
	t.Run("Walks", testWalksBind)
}

func TestOne(t *testing.T) {
	t.Run("Assets", testAssetsOne)
	t.Run("Users", testUsersOne)
	t.Run("UserWalks", testUserWalksOne)
	t.Run("Walks", testWalksOne)
}

func TestAll(t *testing.T) {
	t.Run("Assets", testAssetsAll)
	t.Run("Users", testUsersAll)
	t.Run("UserWalks", testUserWalksAll)
	t.Run("Walks", testWalksAll)
}

func TestCount(t *testing.T) {
	t.Run("Assets", testAssetsCount)
	t.Run("Users", testUsersCount)
	t.Run("UserWalks", testUserWalksCount)
	t.Run("Walks", testWalksCount)
}

func TestHooks(t *testing.T) {
	t.Run("Assets", testAssetsHooks)
	t.Run("Users", testUsersHooks)
	t.Run("UserWalks", testUserWalksHooks)
	t.Run("Walks", testWalksHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Assets", testAssetsInsert)
	t.Run("Assets", testAssetsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("UserWalks", testUserWalksInsert)
	t.Run("UserWalks", testUserWalksInsertWhitelist)
	t.Run("Walks", testWalksInsert)
	t.Run("Walks", testWalksInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("UserWalkToUserUsingUser", testUserWalkToOneUserUsingUser)
	t.Run("UserWalkToWalkUsingWalk", testUserWalkToOneWalkUsingWalk)
	t.Run("WalkToAssetUsingAudio", testWalkToOneAssetUsingAudio)
	t.Run("WalkToUserUsingAuthor", testWalkToOneUserUsingAuthor)
	t.Run("WalkToAssetUsingCover", testWalkToOneAssetUsingCover)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AssetToAudioWalks", testAssetToManyAudioWalks)
	t.Run("AssetToCoverWalks", testAssetToManyCoverWalks)
	t.Run("UserToUserWalks", testUserToManyUserWalks)
	t.Run("UserToAuthorWalks", testUserToManyAuthorWalks)
	t.Run("WalkToUserWalks", testWalkToManyUserWalks)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("UserWalkToUserUsingUserWalks", testUserWalkToOneSetOpUserUsingUser)
	t.Run("UserWalkToWalkUsingUserWalks", testUserWalkToOneSetOpWalkUsingWalk)
	t.Run("WalkToAssetUsingAudioWalks", testWalkToOneSetOpAssetUsingAudio)
	t.Run("WalkToUserUsingAuthorWalks", testWalkToOneSetOpUserUsingAuthor)
	t.Run("WalkToAssetUsingCoverWalks", testWalkToOneSetOpAssetUsingCover)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("WalkToAssetUsingAudioWalks", testWalkToOneRemoveOpAssetUsingAudio)
	t.Run("WalkToAssetUsingCoverWalks", testWalkToOneRemoveOpAssetUsingCover)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AssetToAudioWalks", testAssetToManyAddOpAudioWalks)
	t.Run("AssetToCoverWalks", testAssetToManyAddOpCoverWalks)
	t.Run("UserToUserWalks", testUserToManyAddOpUserWalks)
	t.Run("UserToAuthorWalks", testUserToManyAddOpAuthorWalks)
	t.Run("WalkToUserWalks", testWalkToManyAddOpUserWalks)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("AssetToAudioWalks", testAssetToManySetOpAudioWalks)
	t.Run("AssetToCoverWalks", testAssetToManySetOpCoverWalks)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("AssetToAudioWalks", testAssetToManyRemoveOpAudioWalks)
	t.Run("AssetToCoverWalks", testAssetToManyRemoveOpCoverWalks)
}

func TestReload(t *testing.T) {
	t.Run("Assets", testAssetsReload)
	t.Run("Users", testUsersReload)
	t.Run("UserWalks", testUserWalksReload)
	t.Run("Walks", testWalksReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Assets", testAssetsReloadAll)
	t.Run("Users", testUsersReloadAll)
	t.Run("UserWalks", testUserWalksReloadAll)
	t.Run("Walks", testWalksReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Assets", testAssetsSelect)
	t.Run("Users", testUsersSelect)
	t.Run("UserWalks", testUserWalksSelect)
	t.Run("Walks", testWalksSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Assets", testAssetsUpdate)
	t.Run("Users", testUsersUpdate)
	t.Run("UserWalks", testUserWalksUpdate)
	t.Run("Walks", testWalksUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Assets", testAssetsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("UserWalks", testUserWalksSliceUpdateAll)
	t.Run("Walks", testWalksSliceUpdateAll)
}
