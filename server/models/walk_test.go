// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testWalks(t *testing.T) {
	t.Parallel()

	query := Walks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testWalksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Walk{}
	if err = randomize.Struct(seed, o, walkDBTypes, true, walkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Walks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWalksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Walk{}
	if err = randomize.Struct(seed, o, walkDBTypes, true, walkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Walks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Walks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWalksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Walk{}
	if err = randomize.Struct(seed, o, walkDBTypes, true, walkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WalkSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Walks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWalksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Walk{}
	if err = randomize.Struct(seed, o, walkDBTypes, true, walkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := WalkExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Walk exists: %s", err)
	}
	if !e {
		t.Errorf("Expected WalkExists to return true, but got false.")
	}
}

func testWalksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Walk{}
	if err = randomize.Struct(seed, o, walkDBTypes, true, walkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	walkFound, err := FindWalk(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if walkFound == nil {
		t.Error("want a record, got nil")
	}
}

func testWalksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Walk{}
	if err = randomize.Struct(seed, o, walkDBTypes, true, walkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Walks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testWalksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Walk{}
	if err = randomize.Struct(seed, o, walkDBTypes, true, walkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Walks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testWalksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	walkOne := &Walk{}
	walkTwo := &Walk{}
	if err = randomize.Struct(seed, walkOne, walkDBTypes, false, walkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}
	if err = randomize.Struct(seed, walkTwo, walkDBTypes, false, walkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = walkOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = walkTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Walks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testWalksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	walkOne := &Walk{}
	walkTwo := &Walk{}
	if err = randomize.Struct(seed, walkOne, walkDBTypes, false, walkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}
	if err = randomize.Struct(seed, walkTwo, walkDBTypes, false, walkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = walkOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = walkTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Walks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func walkBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Walk) error {
	*o = Walk{}
	return nil
}

func walkAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Walk) error {
	*o = Walk{}
	return nil
}

func walkAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Walk) error {
	*o = Walk{}
	return nil
}

func walkBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Walk) error {
	*o = Walk{}
	return nil
}

func walkAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Walk) error {
	*o = Walk{}
	return nil
}

func walkBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Walk) error {
	*o = Walk{}
	return nil
}

func walkAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Walk) error {
	*o = Walk{}
	return nil
}

func walkBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Walk) error {
	*o = Walk{}
	return nil
}

func walkAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Walk) error {
	*o = Walk{}
	return nil
}

func testWalksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Walk{}
	o := &Walk{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, walkDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Walk object: %s", err)
	}

	AddWalkHook(boil.BeforeInsertHook, walkBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	walkBeforeInsertHooks = []WalkHook{}

	AddWalkHook(boil.AfterInsertHook, walkAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	walkAfterInsertHooks = []WalkHook{}

	AddWalkHook(boil.AfterSelectHook, walkAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	walkAfterSelectHooks = []WalkHook{}

	AddWalkHook(boil.BeforeUpdateHook, walkBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	walkBeforeUpdateHooks = []WalkHook{}

	AddWalkHook(boil.AfterUpdateHook, walkAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	walkAfterUpdateHooks = []WalkHook{}

	AddWalkHook(boil.BeforeDeleteHook, walkBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	walkBeforeDeleteHooks = []WalkHook{}

	AddWalkHook(boil.AfterDeleteHook, walkAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	walkAfterDeleteHooks = []WalkHook{}

	AddWalkHook(boil.BeforeUpsertHook, walkBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	walkBeforeUpsertHooks = []WalkHook{}

	AddWalkHook(boil.AfterUpsertHook, walkAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	walkAfterUpsertHooks = []WalkHook{}
}

func testWalksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Walk{}
	if err = randomize.Struct(seed, o, walkDBTypes, true, walkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Walks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWalksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Walk{}
	if err = randomize.Struct(seed, o, walkDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(walkColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Walks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWalkToManyUserWalks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Walk
	var b, c UserWalk

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, walkDBTypes, true, walkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userWalkDBTypes, false, userWalkColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userWalkDBTypes, false, userWalkColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.WalkID = a.ID
	c.WalkID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.UserWalks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.WalkID == b.WalkID {
			bFound = true
		}
		if v.WalkID == c.WalkID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := WalkSlice{&a}
	if err = a.L.LoadUserWalks(ctx, tx, false, (*[]*Walk)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserWalks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserWalks = nil
	if err = a.L.LoadUserWalks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserWalks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testWalkToManyAddOpUserWalks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Walk
	var b, c, d, e UserWalk

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, walkDBTypes, false, strmangle.SetComplement(walkPrimaryKeyColumns, walkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserWalk{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userWalkDBTypes, false, strmangle.SetComplement(userWalkPrimaryKeyColumns, userWalkColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserWalk{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserWalks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.WalkID {
			t.Error("foreign key was wrong value", a.ID, first.WalkID)
		}
		if a.ID != second.WalkID {
			t.Error("foreign key was wrong value", a.ID, second.WalkID)
		}

		if first.R.Walk != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Walk != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserWalks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserWalks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserWalks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testWalkToOneAssetUsingAudio(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Walk
	var foreign Asset

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, walkDBTypes, true, walkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, assetDBTypes, false, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.AudioID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Audio().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := WalkSlice{&local}
	if err = local.L.LoadAudio(ctx, tx, false, (*[]*Walk)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Audio == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Audio = nil
	if err = local.L.LoadAudio(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Audio == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testWalkToOneUserUsingAuthor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Walk
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, walkDBTypes, false, walkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AuthorID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Author().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := WalkSlice{&local}
	if err = local.L.LoadAuthor(ctx, tx, false, (*[]*Walk)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Author = nil
	if err = local.L.LoadAuthor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testWalkToOneAssetUsingCover(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Walk
	var foreign Asset

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, walkDBTypes, true, walkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, assetDBTypes, false, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CoverID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Cover().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := WalkSlice{&local}
	if err = local.L.LoadCover(ctx, tx, false, (*[]*Walk)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Cover == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Cover = nil
	if err = local.L.LoadCover(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Cover == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testWalkToOneSetOpAssetUsingAudio(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Walk
	var b, c Asset

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, walkDBTypes, false, strmangle.SetComplement(walkPrimaryKeyColumns, walkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, assetDBTypes, false, strmangle.SetComplement(assetPrimaryKeyColumns, assetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, assetDBTypes, false, strmangle.SetComplement(assetPrimaryKeyColumns, assetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Asset{&b, &c} {
		err = a.SetAudio(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Audio != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AudioWalks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.AudioID, x.ID) {
			t.Error("foreign key was wrong value", a.AudioID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AudioID))
		reflect.Indirect(reflect.ValueOf(&a.AudioID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.AudioID, x.ID) {
			t.Error("foreign key was wrong value", a.AudioID, x.ID)
		}
	}
}

func testWalkToOneRemoveOpAssetUsingAudio(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Walk
	var b Asset

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, walkDBTypes, false, strmangle.SetComplement(walkPrimaryKeyColumns, walkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, assetDBTypes, false, strmangle.SetComplement(assetPrimaryKeyColumns, assetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAudio(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAudio(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Audio().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Audio != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.AudioID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.AudioWalks) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testWalkToOneSetOpUserUsingAuthor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Walk
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, walkDBTypes, false, strmangle.SetComplement(walkPrimaryKeyColumns, walkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetAuthor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Author != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AuthorWalks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AuthorID != x.ID {
			t.Error("foreign key was wrong value", a.AuthorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AuthorID))
		reflect.Indirect(reflect.ValueOf(&a.AuthorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AuthorID != x.ID {
			t.Error("foreign key was wrong value", a.AuthorID, x.ID)
		}
	}
}
func testWalkToOneSetOpAssetUsingCover(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Walk
	var b, c Asset

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, walkDBTypes, false, strmangle.SetComplement(walkPrimaryKeyColumns, walkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, assetDBTypes, false, strmangle.SetComplement(assetPrimaryKeyColumns, assetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, assetDBTypes, false, strmangle.SetComplement(assetPrimaryKeyColumns, assetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Asset{&b, &c} {
		err = a.SetCover(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Cover != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CoverWalks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CoverID, x.ID) {
			t.Error("foreign key was wrong value", a.CoverID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CoverID))
		reflect.Indirect(reflect.ValueOf(&a.CoverID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CoverID, x.ID) {
			t.Error("foreign key was wrong value", a.CoverID, x.ID)
		}
	}
}

func testWalkToOneRemoveOpAssetUsingCover(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Walk
	var b Asset

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, walkDBTypes, false, strmangle.SetComplement(walkPrimaryKeyColumns, walkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, assetDBTypes, false, strmangle.SetComplement(assetPrimaryKeyColumns, assetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCover(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCover(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Cover().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Cover != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CoverID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CoverWalks) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testWalksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Walk{}
	if err = randomize.Struct(seed, o, walkDBTypes, true, walkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWalksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Walk{}
	if err = randomize.Struct(seed, o, walkDBTypes, true, walkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WalkSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWalksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Walk{}
	if err = randomize.Struct(seed, o, walkDBTypes, true, walkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Walks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	walkDBTypes = map[string]string{`ID`: `integer`, `UUID`: `uuid`, `Title`: `text`, `CoverID`: `integer`, `AudioID`: `integer`, `AuthorID`: `integer`, `CreatedAt`: `timestamp with time zone`, `StartPoint`: `point`, `EndPoint`: `point`}
	_           = bytes.MinRead
)

func testWalksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(walkPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(walkAllColumns) == len(walkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Walk{}
	if err = randomize.Struct(seed, o, walkDBTypes, true, walkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Walks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, walkDBTypes, true, walkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testWalksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(walkAllColumns) == len(walkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Walk{}
	if err = randomize.Struct(seed, o, walkDBTypes, true, walkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Walks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, walkDBTypes, true, walkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(walkAllColumns, walkPrimaryKeyColumns) {
		fields = walkAllColumns
	} else {
		fields = strmangle.SetComplement(
			walkAllColumns,
			walkPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := WalkSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testWalksUpsert(t *testing.T) {
	t.Parallel()

	if len(walkAllColumns) == len(walkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Walk{}
	if err = randomize.Struct(seed, &o, walkDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Walk: %s", err)
	}

	count, err := Walks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, walkDBTypes, false, walkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Walk struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Walk: %s", err)
	}

	count, err = Walks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
