// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package entities

func (slice MessageSlice) MapToBool(f func(Message) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlicePtrs) MapToBool(f func(*Message) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlice) MapToByte(f func(Message) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlicePtrs) MapToByte(f func(*Message) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlice) MapToComplex128(f func(Message) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlicePtrs) MapToComplex128(f func(*Message) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlice) MapToComplex64(f func(Message) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlicePtrs) MapToComplex64(f func(*Message) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlice) MapToError(f func(Message) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlicePtrs) MapToError(f func(*Message) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlice) MapToFloat32(f func(Message) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlicePtrs) MapToFloat32(f func(*Message) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlice) MapToFloat64(f func(Message) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlicePtrs) MapToFloat64(f func(*Message) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlice) MapToInt(f func(Message) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlicePtrs) MapToInt(f func(*Message) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlice) MapToInt16(f func(Message) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlicePtrs) MapToInt16(f func(*Message) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlice) MapToInt32(f func(Message) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlicePtrs) MapToInt32(f func(*Message) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlice) MapToInt64(f func(Message) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlicePtrs) MapToInt64(f func(*Message) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlice) MapToInt8(f func(Message) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlicePtrs) MapToInt8(f func(*Message) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlice) MapToRune(f func(Message) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlicePtrs) MapToRune(f func(*Message) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlice) MapToString(f func(Message) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlicePtrs) MapToString(f func(*Message) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlice) MapToUint(f func(Message) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlicePtrs) MapToUint(f func(*Message) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlice) MapToUint16(f func(Message) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlicePtrs) MapToUint16(f func(*Message) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlice) MapToUint32(f func(Message) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlicePtrs) MapToUint32(f func(*Message) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlice) MapToUint64(f func(Message) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlicePtrs) MapToUint64(f func(*Message) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlice) MapToUint8(f func(Message) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlicePtrs) MapToUint8(f func(*Message) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlice) MapToUintptr(f func(Message) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice MessageSlicePtrs) MapToUintptr(f func(*Message) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}
