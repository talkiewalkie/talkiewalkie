// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package entities

func (slice UserConversationSlice) MapToBool(f func(UserConversation) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlicePtrs) MapToBool(f func(*UserConversation) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlice) MapToByte(f func(UserConversation) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlicePtrs) MapToByte(f func(*UserConversation) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlice) MapToComplex128(f func(UserConversation) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlicePtrs) MapToComplex128(f func(*UserConversation) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlice) MapToComplex64(f func(UserConversation) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlicePtrs) MapToComplex64(f func(*UserConversation) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlice) MapToError(f func(UserConversation) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlicePtrs) MapToError(f func(*UserConversation) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlice) MapToFloat32(f func(UserConversation) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlicePtrs) MapToFloat32(f func(*UserConversation) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlice) MapToFloat64(f func(UserConversation) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlicePtrs) MapToFloat64(f func(*UserConversation) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlice) MapToInt(f func(UserConversation) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlicePtrs) MapToInt(f func(*UserConversation) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlice) MapToInt16(f func(UserConversation) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlicePtrs) MapToInt16(f func(*UserConversation) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlice) MapToInt32(f func(UserConversation) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlicePtrs) MapToInt32(f func(*UserConversation) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlice) MapToInt64(f func(UserConversation) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlicePtrs) MapToInt64(f func(*UserConversation) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlice) MapToInt8(f func(UserConversation) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlicePtrs) MapToInt8(f func(*UserConversation) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlice) MapToRune(f func(UserConversation) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlicePtrs) MapToRune(f func(*UserConversation) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlice) MapToString(f func(UserConversation) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlicePtrs) MapToString(f func(*UserConversation) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlice) MapToUint(f func(UserConversation) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlicePtrs) MapToUint(f func(*UserConversation) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlice) MapToUint16(f func(UserConversation) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlicePtrs) MapToUint16(f func(*UserConversation) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlice) MapToUint32(f func(UserConversation) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlicePtrs) MapToUint32(f func(*UserConversation) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlice) MapToUint64(f func(UserConversation) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlicePtrs) MapToUint64(f func(*UserConversation) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlice) MapToUint8(f func(UserConversation) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlicePtrs) MapToUint8(f func(*UserConversation) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlice) MapToUintptr(f func(UserConversation) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserConversationSlicePtrs) MapToUintptr(f func(*UserConversation) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}
