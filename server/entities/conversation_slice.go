// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package entities

type ConversationSlice []Conversation
type ConversationSlicePtrs []*Conversation

func (slice ConversationSlice) UniqueBy(keyer func(Conversation) interface{}) ConversationSlice {
	u := map[interface{}]Conversation{}

	for _, item := range slice {
		key := keyer(item)
		u[key] = item
	}

	out := []Conversation{}
	for _, item := range u {
		out = append(out, item)
	}
	return out
}

func (slice ConversationSlice) FilterBy(predicate func(Conversation) bool) ConversationSlice {
	out := []Conversation{}
	for _, item := range slice {
		if predicate(item) {
			out = append(out, item)
		}
	}

	return out
}

func (slice ConversationSlice) Contains(t Conversation) bool {
	for _, item := range slice {
		if item == t {
			return true
		}
	}

	return false
}

func (slice ConversationSlice) IsEmpty() bool {
	return len(slice) == 0
}

// from https://stackoverflow.com/a/36000696
func (slice ConversationSlice) SameAs(other ConversationSlice) bool {
	if len(slice) != len(other) {
		return false
	}
	// create a map of string -> int
	diff := make(map[Conversation]int, len(slice))
	for _, _x := range slice {
		// 0 value for int is 0, so just increment a counter for the string
		diff[_x]++
	}

	for _, _y := range other {
		// If the string _y is not in diff bail out early
		if _, ok := diff[_y]; !ok {
			return false
		}
		diff[_y] -= 1
		if diff[_y] == 0 {
			delete(diff, _y)
		}
	}

	return len(diff) == 0
}

//
// Slice of pointers
//

func (slice ConversationSlicePtrs) UniqueBy(keyer func(*Conversation) interface{}) ConversationSlicePtrs {
	u := map[interface{}]*Conversation{}

	for _, item := range slice {
		key := keyer(item)
		u[key] = item
	}

	out := []*Conversation{}
	for _, item := range u {
		out = append(out, item)
	}
	return out
}

func (slice ConversationSlicePtrs) FilterBy(predicate func(*Conversation) bool) ConversationSlicePtrs {
	out := []*Conversation{}
	for _, item := range slice {
		if predicate(item) {
			out = append(out, item)
		}
	}

	return out
}

func (slice ConversationSlicePtrs) Contains(t *Conversation) bool {
	for _, item := range slice {
		if item == t {
			return true
		}
	}

	return false
}

func (slice ConversationSlicePtrs) FilterNotNil() ConversationSlicePtrs {
	return slice.FilterBy(func(t *Conversation) bool {
		return t != nil
	})
}

func (slice ConversationSlicePtrs) IsEmpty() bool {
	return len(slice) == 0
}

// from https://stackoverflow.com/a/36000696
func (slice ConversationSlicePtrs) SameAs(other ConversationSlicePtrs) bool {
	if len(slice) != len(other) {
		return false
	}
	// create a map of string -> int
	diff := make(map[Conversation]int, len(slice))
	for _, _x := range slice {
		// 0 value for int is 0, so just increment a counter for the string
		diff[_x]++
	}

	for _, _y := range other {
		// If the string _y is not in diff bail out early
		if _, ok := diff[_y]; !ok {
			return false
		}
		diff[_y] -= 1
		if diff[_y] == 0 {
			delete(diff, _y)
		}
	}

	return len(diff) == 0
}
