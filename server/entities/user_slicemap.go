// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package entities

func (slice UserSlice) MapToBool(f func(User) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlicePtrs) MapToBool(f func(*User) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlice) MapToByte(f func(User) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlicePtrs) MapToByte(f func(*User) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlice) MapToComplex128(f func(User) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlicePtrs) MapToComplex128(f func(*User) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlice) MapToComplex64(f func(User) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlicePtrs) MapToComplex64(f func(*User) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlice) MapToError(f func(User) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlicePtrs) MapToError(f func(*User) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlice) MapToFloat32(f func(User) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlicePtrs) MapToFloat32(f func(*User) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlice) MapToFloat64(f func(User) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlicePtrs) MapToFloat64(f func(*User) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlice) MapToInt(f func(User) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlicePtrs) MapToInt(f func(*User) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlice) MapToInt16(f func(User) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlicePtrs) MapToInt16(f func(*User) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlice) MapToInt32(f func(User) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlicePtrs) MapToInt32(f func(*User) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlice) MapToInt64(f func(User) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlicePtrs) MapToInt64(f func(*User) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlice) MapToInt8(f func(User) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlicePtrs) MapToInt8(f func(*User) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlice) MapToRune(f func(User) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlicePtrs) MapToRune(f func(*User) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlice) MapToString(f func(User) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlicePtrs) MapToString(f func(*User) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlice) MapToUint(f func(User) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlicePtrs) MapToUint(f func(*User) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlice) MapToUint16(f func(User) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlicePtrs) MapToUint16(f func(*User) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlice) MapToUint32(f func(User) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlicePtrs) MapToUint32(f func(*User) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlice) MapToUint64(f func(User) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlicePtrs) MapToUint64(f func(*User) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlice) MapToUint8(f func(User) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlicePtrs) MapToUint8(f func(*User) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlice) MapToUintptr(f func(User) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UserSlicePtrs) MapToUintptr(f func(*User) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}
