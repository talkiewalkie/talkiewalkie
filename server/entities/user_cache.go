// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package entities

import "errors"

type UserCacheByInt struct {
	cache   map[int]*User
	fetcher func([]int) ([]*User, error)
	primer  func(value *User) int
}

func NewUserCacheByInt(
	fetcher func([]int) ([]*User, error),
	primer func(value *User) int,
) UserCacheByInt {
	return UserCacheByInt{
		cache:   map[int]*User{},
		fetcher: fetcher,
		primer:  primer,
	}
}

func (cache *UserCacheByInt) Get(
	identifiers []int,
) ([]*User, error) {
	out := make([]*User, len(identifiers))
	key2index := map[int]int{}

	for idx, key := range identifiers {
		item, ok := cache.cache[key]
		if ok {
			out[idx] = item
		} else {
			key2index[key] = idx
		}
	}

	if len(key2index) > 0 {
		missingKeys := make([]int, len(key2index))
		for key, _ := range key2index {
			missingKeys = append(missingKeys, key)
		}

		records, err := cache.fetcher(missingKeys)
		if err != nil {
			return nil, err
		}

		for idx := range records {
			key := missingKeys[idx]
			record := records[idx]

			out[key2index[key]] = record
			cache.cache[key] = record
		}
	}

	for _, value := range out {
		if value == nil {
			return nil, errors.New("could not fetch from : found nil value")
		}
	}

	return out, nil
}

func (cache UserCacheByInt) Clear() {
	cache.cache = nil
}

func (cache UserCacheByInt) Prime(values ...*User) {
	for _, value := range values {
		cache.cache[cache.primer(value)] = value
	}
}

// ENSURE IMPORTS
var _ uuid2.UUID

type UserCacheByUuid2UUID struct {
	cache   map[uuid2.UUID]*User
	fetcher func([]uuid2.UUID) ([]*User, error)
	primer  func(value *User) uuid2.UUID
}

func NewUserCacheByUuid2UUID(
	fetcher func([]uuid2.UUID) ([]*User, error),
	primer func(value *User) uuid2.UUID,
) UserCacheByUuid2UUID {
	return UserCacheByUuid2UUID{
		cache:   map[uuid2.UUID]*User{},
		fetcher: fetcher,
		primer:  primer,
	}
}

func (cache *UserCacheByUuid2UUID) Get(
	identifiers []uuid2.UUID,
) ([]*User, error) {
	out := make([]*User, len(identifiers))
	key2index := map[uuid2.UUID]int{}

	for idx, key := range identifiers {
		item, ok := cache.cache[key]
		if ok {
			out[idx] = item
		} else {
			key2index[key] = idx
		}
	}

	if len(key2index) > 0 {
		missingKeys := make([]uuid2.UUID, len(key2index))
		for key, _ := range key2index {
			missingKeys = append(missingKeys, key)
		}

		records, err := cache.fetcher(missingKeys)
		if err != nil {
			return nil, err
		}

		for idx := range records {
			key := missingKeys[idx]
			record := records[idx]

			out[key2index[key]] = record
			cache.cache[key] = record
		}
	}

	for _, value := range out {
		if value == nil {
			return nil, errors.New("could not fetch from : found nil value")
		}
	}

	return out, nil
}

func (cache UserCacheByUuid2UUID) Clear() {
	cache.cache = nil
}

func (cache UserCacheByUuid2UUID) Prime(values ...*User) {
	for _, value := range values {
		cache.cache[cache.primer(value)] = value
	}
}

// ENSURE IMPORTS
var _ uuid2.UUID

type UserCacheByString struct {
	cache   map[string]*User
	fetcher func([]string) ([]*User, error)
	primer  func(value *User) string
}

func NewUserCacheByString(
	fetcher func([]string) ([]*User, error),
	primer func(value *User) string,
) UserCacheByString {
	return UserCacheByString{
		cache:   map[string]*User{},
		fetcher: fetcher,
		primer:  primer,
	}
}

func (cache *UserCacheByString) Get(
	identifiers []string,
) ([]*User, error) {
	out := make([]*User, len(identifiers))
	key2index := map[string]int{}

	for idx, key := range identifiers {
		item, ok := cache.cache[key]
		if ok {
			out[idx] = item
		} else {
			key2index[key] = idx
		}
	}

	if len(key2index) > 0 {
		missingKeys := make([]string, len(key2index))
		for key, _ := range key2index {
			missingKeys = append(missingKeys, key)
		}

		records, err := cache.fetcher(missingKeys)
		if err != nil {
			return nil, err
		}

		for idx := range records {
			key := missingKeys[idx]
			record := records[idx]

			out[key2index[key]] = record
			cache.cache[key] = record
		}
	}

	for _, value := range out {
		if value == nil {
			return nil, errors.New("could not fetch from : found nil value")
		}
	}

	return out, nil
}

func (cache UserCacheByString) Clear() {
	cache.cache = nil
}

func (cache UserCacheByString) Prime(values ...*User) {
	for _, value := range values {
		cache.cache[cache.primer(value)] = value
	}
}

// ENSURE IMPORTS
var _ uuid2.UUID
