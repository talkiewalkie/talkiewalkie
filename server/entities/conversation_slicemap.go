// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package entities

func (slice ConversationSlice) MapToBool(f func(Conversation) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlicePtrs) MapToBool(f func(*Conversation) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlice) MapToByte(f func(Conversation) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlicePtrs) MapToByte(f func(*Conversation) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlice) MapToComplex128(f func(Conversation) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlicePtrs) MapToComplex128(f func(*Conversation) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlice) MapToComplex64(f func(Conversation) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlicePtrs) MapToComplex64(f func(*Conversation) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlice) MapToError(f func(Conversation) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlicePtrs) MapToError(f func(*Conversation) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlice) MapToFloat32(f func(Conversation) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlicePtrs) MapToFloat32(f func(*Conversation) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlice) MapToFloat64(f func(Conversation) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlicePtrs) MapToFloat64(f func(*Conversation) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlice) MapToInt(f func(Conversation) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlicePtrs) MapToInt(f func(*Conversation) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlice) MapToInt16(f func(Conversation) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlicePtrs) MapToInt16(f func(*Conversation) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlice) MapToInt32(f func(Conversation) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlicePtrs) MapToInt32(f func(*Conversation) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlice) MapToInt64(f func(Conversation) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlicePtrs) MapToInt64(f func(*Conversation) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlice) MapToInt8(f func(Conversation) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlicePtrs) MapToInt8(f func(*Conversation) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlice) MapToRune(f func(Conversation) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlicePtrs) MapToRune(f func(*Conversation) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlice) MapToString(f func(Conversation) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlicePtrs) MapToString(f func(*Conversation) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlice) MapToUint(f func(Conversation) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlicePtrs) MapToUint(f func(*Conversation) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlice) MapToUint16(f func(Conversation) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlicePtrs) MapToUint16(f func(*Conversation) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlice) MapToUint32(f func(Conversation) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlicePtrs) MapToUint32(f func(*Conversation) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlice) MapToUint64(f func(Conversation) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlicePtrs) MapToUint64(f func(*Conversation) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlice) MapToUint8(f func(Conversation) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlicePtrs) MapToUint8(f func(*Conversation) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlice) MapToUintptr(f func(Conversation) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ConversationSlicePtrs) MapToUintptr(f func(*Conversation) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}
