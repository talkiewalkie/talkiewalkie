// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package entities

func (slice AssetSlice) MapToBool(f func(Asset) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlicePtrs) MapToBool(f func(*Asset) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlice) MapToByte(f func(Asset) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlicePtrs) MapToByte(f func(*Asset) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlice) MapToComplex128(f func(Asset) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlicePtrs) MapToComplex128(f func(*Asset) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlice) MapToComplex64(f func(Asset) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlicePtrs) MapToComplex64(f func(*Asset) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlice) MapToError(f func(Asset) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlicePtrs) MapToError(f func(*Asset) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlice) MapToFloat32(f func(Asset) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlicePtrs) MapToFloat32(f func(*Asset) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlice) MapToFloat64(f func(Asset) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlicePtrs) MapToFloat64(f func(*Asset) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlice) MapToInt(f func(Asset) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlicePtrs) MapToInt(f func(*Asset) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlice) MapToInt16(f func(Asset) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlicePtrs) MapToInt16(f func(*Asset) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlice) MapToInt32(f func(Asset) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlicePtrs) MapToInt32(f func(*Asset) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlice) MapToInt64(f func(Asset) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlicePtrs) MapToInt64(f func(*Asset) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlice) MapToInt8(f func(Asset) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlicePtrs) MapToInt8(f func(*Asset) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlice) MapToRune(f func(Asset) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlicePtrs) MapToRune(f func(*Asset) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlice) MapToString(f func(Asset) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlicePtrs) MapToString(f func(*Asset) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlice) MapToUint(f func(Asset) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlicePtrs) MapToUint(f func(*Asset) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlice) MapToUint16(f func(Asset) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlicePtrs) MapToUint16(f func(*Asset) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlice) MapToUint32(f func(Asset) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlicePtrs) MapToUint32(f func(*Asset) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlice) MapToUint64(f func(Asset) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlicePtrs) MapToUint64(f func(*Asset) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlice) MapToUint8(f func(Asset) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlicePtrs) MapToUint8(f func(*Asset) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlice) MapToUintptr(f func(Asset) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice AssetSlicePtrs) MapToUintptr(f func(*Asset) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}
