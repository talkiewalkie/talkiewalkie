// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package entities

type AssetSlice []Asset
type AssetSlicePtrs []*Asset

func (slice AssetSlice) UniqueBy(keyer func(Asset) interface{}) AssetSlice {
	u := map[interface{}]Asset{}

	for _, item := range slice {
		key := keyer(item)
		u[key] = item
	}

	out := []Asset{}
	for _, item := range u {
		out = append(out, item)
	}
	return out
}

func (slice AssetSlice) FilterBy(predicate func(Asset) bool) AssetSlice {
	out := []Asset{}
	for _, item := range slice {
		if predicate(item) {
			out = append(out, item)
		}
	}

	return out
}

func (slice AssetSlice) Contains(t Asset) bool {
	for _, item := range slice {
		if item == t {
			return true
		}
	}

	return false
}

func (slice AssetSlice) IsEmpty() bool {
	return len(slice) == 0
}

// from https://stackoverflow.com/a/36000696
func (slice AssetSlice) SameAs(other AssetSlice) bool {
	if len(slice) != len(other) {
		return false
	}
	// create a map of string -> int
	diff := make(map[Asset]int, len(slice))
	for _, _x := range slice {
		// 0 value for int is 0, so just increment a counter for the string
		diff[_x]++
	}

	for _, _y := range other {
		// If the string _y is not in diff bail out early
		if _, ok := diff[_y]; !ok {
			return false
		}
		diff[_y] -= 1
		if diff[_y] == 0 {
			delete(diff, _y)
		}
	}

	return len(diff) == 0
}

//
// Slice of pointers
//

func (slice AssetSlicePtrs) UniqueBy(keyer func(*Asset) interface{}) AssetSlicePtrs {
	u := map[interface{}]*Asset{}

	for _, item := range slice {
		key := keyer(item)
		u[key] = item
	}

	out := []*Asset{}
	for _, item := range u {
		out = append(out, item)
	}
	return out
}

func (slice AssetSlicePtrs) FilterBy(predicate func(*Asset) bool) AssetSlicePtrs {
	out := []*Asset{}
	for _, item := range slice {
		if predicate(item) {
			out = append(out, item)
		}
	}

	return out
}

func (slice AssetSlicePtrs) Contains(t *Asset) bool {
	for _, item := range slice {
		if item == t {
			return true
		}
	}

	return false
}

func (slice AssetSlicePtrs) FilterNotNil() AssetSlicePtrs {
	return slice.FilterBy(func(t *Asset) bool {
		return t != nil
	})
}

func (slice AssetSlicePtrs) IsEmpty() bool {
	return len(slice) == 0
}

// from https://stackoverflow.com/a/36000696
func (slice AssetSlicePtrs) SameAs(other AssetSlicePtrs) bool {
	if len(slice) != len(other) {
		return false
	}
	// create a map of string -> int
	diff := make(map[Asset]int, len(slice))
	for _, _x := range slice {
		// 0 value for int is 0, so just increment a counter for the string
		diff[_x]++
	}

	for _, _y := range other {
		// If the string _y is not in diff bail out early
		if _, ok := diff[_y]; !ok {
			return false
		}
		diff[_y] -= 1
		if diff[_y] == 0 {
			delete(diff, _y)
		}
	}

	return len(diff) == 0
}
