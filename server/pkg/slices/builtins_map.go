// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package slices

func (slice BoolSlice) MapToBool(f func(bool) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlicePtrs) MapToBool(f func(*bool) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlice) MapToByte(f func(bool) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlicePtrs) MapToByte(f func(*bool) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlice) MapToComplex128(f func(bool) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlicePtrs) MapToComplex128(f func(*bool) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlice) MapToComplex64(f func(bool) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlicePtrs) MapToComplex64(f func(*bool) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlice) MapToError(f func(bool) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlicePtrs) MapToError(f func(*bool) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlice) MapToFloat32(f func(bool) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlicePtrs) MapToFloat32(f func(*bool) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlice) MapToFloat64(f func(bool) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlicePtrs) MapToFloat64(f func(*bool) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlice) MapToInt(f func(bool) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlicePtrs) MapToInt(f func(*bool) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlice) MapToInt16(f func(bool) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlicePtrs) MapToInt16(f func(*bool) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlice) MapToInt32(f func(bool) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlicePtrs) MapToInt32(f func(*bool) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlice) MapToInt64(f func(bool) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlicePtrs) MapToInt64(f func(*bool) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlice) MapToInt8(f func(bool) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlicePtrs) MapToInt8(f func(*bool) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlice) MapToRune(f func(bool) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlicePtrs) MapToRune(f func(*bool) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlice) MapToString(f func(bool) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlicePtrs) MapToString(f func(*bool) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlice) MapToUint(f func(bool) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlicePtrs) MapToUint(f func(*bool) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlice) MapToUint16(f func(bool) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlicePtrs) MapToUint16(f func(*bool) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlice) MapToUint32(f func(bool) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlicePtrs) MapToUint32(f func(*bool) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlice) MapToUint64(f func(bool) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlicePtrs) MapToUint64(f func(*bool) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlice) MapToUint8(f func(bool) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlicePtrs) MapToUint8(f func(*bool) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlice) MapToUintptr(f func(bool) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice BoolSlicePtrs) MapToUintptr(f func(*bool) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlice) MapToBool(f func(byte) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlicePtrs) MapToBool(f func(*byte) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlice) MapToByte(f func(byte) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlicePtrs) MapToByte(f func(*byte) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlice) MapToComplex128(f func(byte) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlicePtrs) MapToComplex128(f func(*byte) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlice) MapToComplex64(f func(byte) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlicePtrs) MapToComplex64(f func(*byte) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlice) MapToError(f func(byte) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlicePtrs) MapToError(f func(*byte) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlice) MapToFloat32(f func(byte) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlicePtrs) MapToFloat32(f func(*byte) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlice) MapToFloat64(f func(byte) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlicePtrs) MapToFloat64(f func(*byte) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlice) MapToInt(f func(byte) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlicePtrs) MapToInt(f func(*byte) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlice) MapToInt16(f func(byte) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlicePtrs) MapToInt16(f func(*byte) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlice) MapToInt32(f func(byte) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlicePtrs) MapToInt32(f func(*byte) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlice) MapToInt64(f func(byte) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlicePtrs) MapToInt64(f func(*byte) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlice) MapToInt8(f func(byte) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlicePtrs) MapToInt8(f func(*byte) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlice) MapToRune(f func(byte) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlicePtrs) MapToRune(f func(*byte) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlice) MapToString(f func(byte) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlicePtrs) MapToString(f func(*byte) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlice) MapToUint(f func(byte) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlicePtrs) MapToUint(f func(*byte) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlice) MapToUint16(f func(byte) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlicePtrs) MapToUint16(f func(*byte) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlice) MapToUint32(f func(byte) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlicePtrs) MapToUint32(f func(*byte) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlice) MapToUint64(f func(byte) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlicePtrs) MapToUint64(f func(*byte) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlice) MapToUint8(f func(byte) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlicePtrs) MapToUint8(f func(*byte) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlice) MapToUintptr(f func(byte) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ByteSlicePtrs) MapToUintptr(f func(*byte) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128Slice) MapToBool(f func(complex128) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128SlicePtrs) MapToBool(f func(*complex128) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128Slice) MapToByte(f func(complex128) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128SlicePtrs) MapToByte(f func(*complex128) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128Slice) MapToComplex128(f func(complex128) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128SlicePtrs) MapToComplex128(f func(*complex128) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128Slice) MapToComplex64(f func(complex128) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128SlicePtrs) MapToComplex64(f func(*complex128) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128Slice) MapToError(f func(complex128) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128SlicePtrs) MapToError(f func(*complex128) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128Slice) MapToFloat32(f func(complex128) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128SlicePtrs) MapToFloat32(f func(*complex128) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128Slice) MapToFloat64(f func(complex128) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128SlicePtrs) MapToFloat64(f func(*complex128) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128Slice) MapToInt(f func(complex128) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128SlicePtrs) MapToInt(f func(*complex128) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128Slice) MapToInt16(f func(complex128) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128SlicePtrs) MapToInt16(f func(*complex128) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128Slice) MapToInt32(f func(complex128) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128SlicePtrs) MapToInt32(f func(*complex128) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128Slice) MapToInt64(f func(complex128) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128SlicePtrs) MapToInt64(f func(*complex128) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128Slice) MapToInt8(f func(complex128) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128SlicePtrs) MapToInt8(f func(*complex128) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128Slice) MapToRune(f func(complex128) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128SlicePtrs) MapToRune(f func(*complex128) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128Slice) MapToString(f func(complex128) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128SlicePtrs) MapToString(f func(*complex128) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128Slice) MapToUint(f func(complex128) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128SlicePtrs) MapToUint(f func(*complex128) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128Slice) MapToUint16(f func(complex128) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128SlicePtrs) MapToUint16(f func(*complex128) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128Slice) MapToUint32(f func(complex128) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128SlicePtrs) MapToUint32(f func(*complex128) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128Slice) MapToUint64(f func(complex128) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128SlicePtrs) MapToUint64(f func(*complex128) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128Slice) MapToUint8(f func(complex128) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128SlicePtrs) MapToUint8(f func(*complex128) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128Slice) MapToUintptr(f func(complex128) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex128SlicePtrs) MapToUintptr(f func(*complex128) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64Slice) MapToBool(f func(complex64) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64SlicePtrs) MapToBool(f func(*complex64) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64Slice) MapToByte(f func(complex64) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64SlicePtrs) MapToByte(f func(*complex64) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64Slice) MapToComplex128(f func(complex64) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64SlicePtrs) MapToComplex128(f func(*complex64) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64Slice) MapToComplex64(f func(complex64) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64SlicePtrs) MapToComplex64(f func(*complex64) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64Slice) MapToError(f func(complex64) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64SlicePtrs) MapToError(f func(*complex64) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64Slice) MapToFloat32(f func(complex64) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64SlicePtrs) MapToFloat32(f func(*complex64) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64Slice) MapToFloat64(f func(complex64) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64SlicePtrs) MapToFloat64(f func(*complex64) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64Slice) MapToInt(f func(complex64) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64SlicePtrs) MapToInt(f func(*complex64) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64Slice) MapToInt16(f func(complex64) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64SlicePtrs) MapToInt16(f func(*complex64) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64Slice) MapToInt32(f func(complex64) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64SlicePtrs) MapToInt32(f func(*complex64) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64Slice) MapToInt64(f func(complex64) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64SlicePtrs) MapToInt64(f func(*complex64) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64Slice) MapToInt8(f func(complex64) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64SlicePtrs) MapToInt8(f func(*complex64) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64Slice) MapToRune(f func(complex64) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64SlicePtrs) MapToRune(f func(*complex64) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64Slice) MapToString(f func(complex64) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64SlicePtrs) MapToString(f func(*complex64) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64Slice) MapToUint(f func(complex64) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64SlicePtrs) MapToUint(f func(*complex64) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64Slice) MapToUint16(f func(complex64) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64SlicePtrs) MapToUint16(f func(*complex64) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64Slice) MapToUint32(f func(complex64) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64SlicePtrs) MapToUint32(f func(*complex64) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64Slice) MapToUint64(f func(complex64) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64SlicePtrs) MapToUint64(f func(*complex64) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64Slice) MapToUint8(f func(complex64) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64SlicePtrs) MapToUint8(f func(*complex64) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64Slice) MapToUintptr(f func(complex64) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Complex64SlicePtrs) MapToUintptr(f func(*complex64) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlice) MapToBool(f func(error) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlicePtrs) MapToBool(f func(*error) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlice) MapToByte(f func(error) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlicePtrs) MapToByte(f func(*error) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlice) MapToComplex128(f func(error) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlicePtrs) MapToComplex128(f func(*error) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlice) MapToComplex64(f func(error) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlicePtrs) MapToComplex64(f func(*error) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlice) MapToError(f func(error) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlicePtrs) MapToError(f func(*error) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlice) MapToFloat32(f func(error) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlicePtrs) MapToFloat32(f func(*error) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlice) MapToFloat64(f func(error) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlicePtrs) MapToFloat64(f func(*error) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlice) MapToInt(f func(error) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlicePtrs) MapToInt(f func(*error) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlice) MapToInt16(f func(error) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlicePtrs) MapToInt16(f func(*error) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlice) MapToInt32(f func(error) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlicePtrs) MapToInt32(f func(*error) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlice) MapToInt64(f func(error) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlicePtrs) MapToInt64(f func(*error) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlice) MapToInt8(f func(error) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlicePtrs) MapToInt8(f func(*error) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlice) MapToRune(f func(error) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlicePtrs) MapToRune(f func(*error) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlice) MapToString(f func(error) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlicePtrs) MapToString(f func(*error) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlice) MapToUint(f func(error) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlicePtrs) MapToUint(f func(*error) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlice) MapToUint16(f func(error) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlicePtrs) MapToUint16(f func(*error) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlice) MapToUint32(f func(error) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlicePtrs) MapToUint32(f func(*error) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlice) MapToUint64(f func(error) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlicePtrs) MapToUint64(f func(*error) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlice) MapToUint8(f func(error) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlicePtrs) MapToUint8(f func(*error) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlice) MapToUintptr(f func(error) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice ErrorSlicePtrs) MapToUintptr(f func(*error) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32Slice) MapToBool(f func(float32) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32SlicePtrs) MapToBool(f func(*float32) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32Slice) MapToByte(f func(float32) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32SlicePtrs) MapToByte(f func(*float32) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32Slice) MapToComplex128(f func(float32) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32SlicePtrs) MapToComplex128(f func(*float32) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32Slice) MapToComplex64(f func(float32) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32SlicePtrs) MapToComplex64(f func(*float32) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32Slice) MapToError(f func(float32) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32SlicePtrs) MapToError(f func(*float32) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32Slice) MapToFloat32(f func(float32) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32SlicePtrs) MapToFloat32(f func(*float32) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32Slice) MapToFloat64(f func(float32) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32SlicePtrs) MapToFloat64(f func(*float32) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32Slice) MapToInt(f func(float32) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32SlicePtrs) MapToInt(f func(*float32) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32Slice) MapToInt16(f func(float32) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32SlicePtrs) MapToInt16(f func(*float32) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32Slice) MapToInt32(f func(float32) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32SlicePtrs) MapToInt32(f func(*float32) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32Slice) MapToInt64(f func(float32) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32SlicePtrs) MapToInt64(f func(*float32) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32Slice) MapToInt8(f func(float32) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32SlicePtrs) MapToInt8(f func(*float32) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32Slice) MapToRune(f func(float32) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32SlicePtrs) MapToRune(f func(*float32) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32Slice) MapToString(f func(float32) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32SlicePtrs) MapToString(f func(*float32) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32Slice) MapToUint(f func(float32) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32SlicePtrs) MapToUint(f func(*float32) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32Slice) MapToUint16(f func(float32) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32SlicePtrs) MapToUint16(f func(*float32) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32Slice) MapToUint32(f func(float32) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32SlicePtrs) MapToUint32(f func(*float32) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32Slice) MapToUint64(f func(float32) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32SlicePtrs) MapToUint64(f func(*float32) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32Slice) MapToUint8(f func(float32) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32SlicePtrs) MapToUint8(f func(*float32) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32Slice) MapToUintptr(f func(float32) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float32SlicePtrs) MapToUintptr(f func(*float32) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64Slice) MapToBool(f func(float64) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64SlicePtrs) MapToBool(f func(*float64) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64Slice) MapToByte(f func(float64) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64SlicePtrs) MapToByte(f func(*float64) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64Slice) MapToComplex128(f func(float64) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64SlicePtrs) MapToComplex128(f func(*float64) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64Slice) MapToComplex64(f func(float64) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64SlicePtrs) MapToComplex64(f func(*float64) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64Slice) MapToError(f func(float64) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64SlicePtrs) MapToError(f func(*float64) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64Slice) MapToFloat32(f func(float64) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64SlicePtrs) MapToFloat32(f func(*float64) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64Slice) MapToFloat64(f func(float64) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64SlicePtrs) MapToFloat64(f func(*float64) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64Slice) MapToInt(f func(float64) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64SlicePtrs) MapToInt(f func(*float64) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64Slice) MapToInt16(f func(float64) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64SlicePtrs) MapToInt16(f func(*float64) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64Slice) MapToInt32(f func(float64) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64SlicePtrs) MapToInt32(f func(*float64) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64Slice) MapToInt64(f func(float64) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64SlicePtrs) MapToInt64(f func(*float64) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64Slice) MapToInt8(f func(float64) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64SlicePtrs) MapToInt8(f func(*float64) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64Slice) MapToRune(f func(float64) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64SlicePtrs) MapToRune(f func(*float64) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64Slice) MapToString(f func(float64) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64SlicePtrs) MapToString(f func(*float64) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64Slice) MapToUint(f func(float64) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64SlicePtrs) MapToUint(f func(*float64) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64Slice) MapToUint16(f func(float64) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64SlicePtrs) MapToUint16(f func(*float64) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64Slice) MapToUint32(f func(float64) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64SlicePtrs) MapToUint32(f func(*float64) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64Slice) MapToUint64(f func(float64) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64SlicePtrs) MapToUint64(f func(*float64) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64Slice) MapToUint8(f func(float64) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64SlicePtrs) MapToUint8(f func(*float64) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64Slice) MapToUintptr(f func(float64) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Float64SlicePtrs) MapToUintptr(f func(*float64) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlice) MapToBool(f func(int) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlicePtrs) MapToBool(f func(*int) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlice) MapToByte(f func(int) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlicePtrs) MapToByte(f func(*int) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlice) MapToComplex128(f func(int) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlicePtrs) MapToComplex128(f func(*int) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlice) MapToComplex64(f func(int) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlicePtrs) MapToComplex64(f func(*int) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlice) MapToError(f func(int) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlicePtrs) MapToError(f func(*int) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlice) MapToFloat32(f func(int) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlicePtrs) MapToFloat32(f func(*int) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlice) MapToFloat64(f func(int) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlicePtrs) MapToFloat64(f func(*int) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlice) MapToInt(f func(int) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlicePtrs) MapToInt(f func(*int) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlice) MapToInt16(f func(int) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlicePtrs) MapToInt16(f func(*int) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlice) MapToInt32(f func(int) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlicePtrs) MapToInt32(f func(*int) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlice) MapToInt64(f func(int) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlicePtrs) MapToInt64(f func(*int) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlice) MapToInt8(f func(int) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlicePtrs) MapToInt8(f func(*int) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlice) MapToRune(f func(int) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlicePtrs) MapToRune(f func(*int) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlice) MapToString(f func(int) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlicePtrs) MapToString(f func(*int) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlice) MapToUint(f func(int) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlicePtrs) MapToUint(f func(*int) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlice) MapToUint16(f func(int) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlicePtrs) MapToUint16(f func(*int) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlice) MapToUint32(f func(int) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlicePtrs) MapToUint32(f func(*int) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlice) MapToUint64(f func(int) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlicePtrs) MapToUint64(f func(*int) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlice) MapToUint8(f func(int) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlicePtrs) MapToUint8(f func(*int) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlice) MapToUintptr(f func(int) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice IntSlicePtrs) MapToUintptr(f func(*int) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16Slice) MapToBool(f func(int16) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16SlicePtrs) MapToBool(f func(*int16) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16Slice) MapToByte(f func(int16) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16SlicePtrs) MapToByte(f func(*int16) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16Slice) MapToComplex128(f func(int16) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16SlicePtrs) MapToComplex128(f func(*int16) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16Slice) MapToComplex64(f func(int16) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16SlicePtrs) MapToComplex64(f func(*int16) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16Slice) MapToError(f func(int16) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16SlicePtrs) MapToError(f func(*int16) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16Slice) MapToFloat32(f func(int16) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16SlicePtrs) MapToFloat32(f func(*int16) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16Slice) MapToFloat64(f func(int16) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16SlicePtrs) MapToFloat64(f func(*int16) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16Slice) MapToInt(f func(int16) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16SlicePtrs) MapToInt(f func(*int16) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16Slice) MapToInt16(f func(int16) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16SlicePtrs) MapToInt16(f func(*int16) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16Slice) MapToInt32(f func(int16) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16SlicePtrs) MapToInt32(f func(*int16) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16Slice) MapToInt64(f func(int16) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16SlicePtrs) MapToInt64(f func(*int16) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16Slice) MapToInt8(f func(int16) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16SlicePtrs) MapToInt8(f func(*int16) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16Slice) MapToRune(f func(int16) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16SlicePtrs) MapToRune(f func(*int16) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16Slice) MapToString(f func(int16) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16SlicePtrs) MapToString(f func(*int16) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16Slice) MapToUint(f func(int16) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16SlicePtrs) MapToUint(f func(*int16) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16Slice) MapToUint16(f func(int16) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16SlicePtrs) MapToUint16(f func(*int16) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16Slice) MapToUint32(f func(int16) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16SlicePtrs) MapToUint32(f func(*int16) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16Slice) MapToUint64(f func(int16) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16SlicePtrs) MapToUint64(f func(*int16) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16Slice) MapToUint8(f func(int16) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16SlicePtrs) MapToUint8(f func(*int16) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16Slice) MapToUintptr(f func(int16) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int16SlicePtrs) MapToUintptr(f func(*int16) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32Slice) MapToBool(f func(int32) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32SlicePtrs) MapToBool(f func(*int32) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32Slice) MapToByte(f func(int32) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32SlicePtrs) MapToByte(f func(*int32) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32Slice) MapToComplex128(f func(int32) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32SlicePtrs) MapToComplex128(f func(*int32) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32Slice) MapToComplex64(f func(int32) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32SlicePtrs) MapToComplex64(f func(*int32) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32Slice) MapToError(f func(int32) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32SlicePtrs) MapToError(f func(*int32) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32Slice) MapToFloat32(f func(int32) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32SlicePtrs) MapToFloat32(f func(*int32) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32Slice) MapToFloat64(f func(int32) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32SlicePtrs) MapToFloat64(f func(*int32) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32Slice) MapToInt(f func(int32) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32SlicePtrs) MapToInt(f func(*int32) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32Slice) MapToInt16(f func(int32) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32SlicePtrs) MapToInt16(f func(*int32) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32Slice) MapToInt32(f func(int32) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32SlicePtrs) MapToInt32(f func(*int32) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32Slice) MapToInt64(f func(int32) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32SlicePtrs) MapToInt64(f func(*int32) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32Slice) MapToInt8(f func(int32) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32SlicePtrs) MapToInt8(f func(*int32) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32Slice) MapToRune(f func(int32) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32SlicePtrs) MapToRune(f func(*int32) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32Slice) MapToString(f func(int32) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32SlicePtrs) MapToString(f func(*int32) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32Slice) MapToUint(f func(int32) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32SlicePtrs) MapToUint(f func(*int32) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32Slice) MapToUint16(f func(int32) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32SlicePtrs) MapToUint16(f func(*int32) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32Slice) MapToUint32(f func(int32) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32SlicePtrs) MapToUint32(f func(*int32) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32Slice) MapToUint64(f func(int32) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32SlicePtrs) MapToUint64(f func(*int32) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32Slice) MapToUint8(f func(int32) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32SlicePtrs) MapToUint8(f func(*int32) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32Slice) MapToUintptr(f func(int32) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int32SlicePtrs) MapToUintptr(f func(*int32) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64Slice) MapToBool(f func(int64) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64SlicePtrs) MapToBool(f func(*int64) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64Slice) MapToByte(f func(int64) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64SlicePtrs) MapToByte(f func(*int64) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64Slice) MapToComplex128(f func(int64) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64SlicePtrs) MapToComplex128(f func(*int64) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64Slice) MapToComplex64(f func(int64) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64SlicePtrs) MapToComplex64(f func(*int64) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64Slice) MapToError(f func(int64) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64SlicePtrs) MapToError(f func(*int64) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64Slice) MapToFloat32(f func(int64) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64SlicePtrs) MapToFloat32(f func(*int64) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64Slice) MapToFloat64(f func(int64) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64SlicePtrs) MapToFloat64(f func(*int64) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64Slice) MapToInt(f func(int64) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64SlicePtrs) MapToInt(f func(*int64) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64Slice) MapToInt16(f func(int64) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64SlicePtrs) MapToInt16(f func(*int64) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64Slice) MapToInt32(f func(int64) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64SlicePtrs) MapToInt32(f func(*int64) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64Slice) MapToInt64(f func(int64) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64SlicePtrs) MapToInt64(f func(*int64) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64Slice) MapToInt8(f func(int64) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64SlicePtrs) MapToInt8(f func(*int64) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64Slice) MapToRune(f func(int64) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64SlicePtrs) MapToRune(f func(*int64) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64Slice) MapToString(f func(int64) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64SlicePtrs) MapToString(f func(*int64) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64Slice) MapToUint(f func(int64) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64SlicePtrs) MapToUint(f func(*int64) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64Slice) MapToUint16(f func(int64) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64SlicePtrs) MapToUint16(f func(*int64) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64Slice) MapToUint32(f func(int64) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64SlicePtrs) MapToUint32(f func(*int64) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64Slice) MapToUint64(f func(int64) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64SlicePtrs) MapToUint64(f func(*int64) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64Slice) MapToUint8(f func(int64) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64SlicePtrs) MapToUint8(f func(*int64) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64Slice) MapToUintptr(f func(int64) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int64SlicePtrs) MapToUintptr(f func(*int64) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8Slice) MapToBool(f func(int8) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8SlicePtrs) MapToBool(f func(*int8) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8Slice) MapToByte(f func(int8) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8SlicePtrs) MapToByte(f func(*int8) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8Slice) MapToComplex128(f func(int8) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8SlicePtrs) MapToComplex128(f func(*int8) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8Slice) MapToComplex64(f func(int8) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8SlicePtrs) MapToComplex64(f func(*int8) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8Slice) MapToError(f func(int8) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8SlicePtrs) MapToError(f func(*int8) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8Slice) MapToFloat32(f func(int8) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8SlicePtrs) MapToFloat32(f func(*int8) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8Slice) MapToFloat64(f func(int8) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8SlicePtrs) MapToFloat64(f func(*int8) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8Slice) MapToInt(f func(int8) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8SlicePtrs) MapToInt(f func(*int8) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8Slice) MapToInt16(f func(int8) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8SlicePtrs) MapToInt16(f func(*int8) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8Slice) MapToInt32(f func(int8) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8SlicePtrs) MapToInt32(f func(*int8) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8Slice) MapToInt64(f func(int8) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8SlicePtrs) MapToInt64(f func(*int8) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8Slice) MapToInt8(f func(int8) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8SlicePtrs) MapToInt8(f func(*int8) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8Slice) MapToRune(f func(int8) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8SlicePtrs) MapToRune(f func(*int8) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8Slice) MapToString(f func(int8) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8SlicePtrs) MapToString(f func(*int8) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8Slice) MapToUint(f func(int8) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8SlicePtrs) MapToUint(f func(*int8) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8Slice) MapToUint16(f func(int8) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8SlicePtrs) MapToUint16(f func(*int8) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8Slice) MapToUint32(f func(int8) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8SlicePtrs) MapToUint32(f func(*int8) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8Slice) MapToUint64(f func(int8) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8SlicePtrs) MapToUint64(f func(*int8) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8Slice) MapToUint8(f func(int8) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8SlicePtrs) MapToUint8(f func(*int8) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8Slice) MapToUintptr(f func(int8) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Int8SlicePtrs) MapToUintptr(f func(*int8) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlice) MapToBool(f func(rune) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlicePtrs) MapToBool(f func(*rune) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlice) MapToByte(f func(rune) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlicePtrs) MapToByte(f func(*rune) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlice) MapToComplex128(f func(rune) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlicePtrs) MapToComplex128(f func(*rune) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlice) MapToComplex64(f func(rune) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlicePtrs) MapToComplex64(f func(*rune) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlice) MapToError(f func(rune) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlicePtrs) MapToError(f func(*rune) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlice) MapToFloat32(f func(rune) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlicePtrs) MapToFloat32(f func(*rune) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlice) MapToFloat64(f func(rune) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlicePtrs) MapToFloat64(f func(*rune) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlice) MapToInt(f func(rune) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlicePtrs) MapToInt(f func(*rune) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlice) MapToInt16(f func(rune) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlicePtrs) MapToInt16(f func(*rune) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlice) MapToInt32(f func(rune) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlicePtrs) MapToInt32(f func(*rune) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlice) MapToInt64(f func(rune) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlicePtrs) MapToInt64(f func(*rune) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlice) MapToInt8(f func(rune) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlicePtrs) MapToInt8(f func(*rune) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlice) MapToRune(f func(rune) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlicePtrs) MapToRune(f func(*rune) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlice) MapToString(f func(rune) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlicePtrs) MapToString(f func(*rune) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlice) MapToUint(f func(rune) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlicePtrs) MapToUint(f func(*rune) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlice) MapToUint16(f func(rune) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlicePtrs) MapToUint16(f func(*rune) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlice) MapToUint32(f func(rune) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlicePtrs) MapToUint32(f func(*rune) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlice) MapToUint64(f func(rune) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlicePtrs) MapToUint64(f func(*rune) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlice) MapToUint8(f func(rune) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlicePtrs) MapToUint8(f func(*rune) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlice) MapToUintptr(f func(rune) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice RuneSlicePtrs) MapToUintptr(f func(*rune) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlice) MapToBool(f func(string) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlicePtrs) MapToBool(f func(*string) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlice) MapToByte(f func(string) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlicePtrs) MapToByte(f func(*string) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlice) MapToComplex128(f func(string) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlicePtrs) MapToComplex128(f func(*string) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlice) MapToComplex64(f func(string) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlicePtrs) MapToComplex64(f func(*string) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlice) MapToError(f func(string) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlicePtrs) MapToError(f func(*string) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlice) MapToFloat32(f func(string) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlicePtrs) MapToFloat32(f func(*string) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlice) MapToFloat64(f func(string) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlicePtrs) MapToFloat64(f func(*string) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlice) MapToInt(f func(string) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlicePtrs) MapToInt(f func(*string) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlice) MapToInt16(f func(string) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlicePtrs) MapToInt16(f func(*string) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlice) MapToInt32(f func(string) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlicePtrs) MapToInt32(f func(*string) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlice) MapToInt64(f func(string) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlicePtrs) MapToInt64(f func(*string) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlice) MapToInt8(f func(string) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlicePtrs) MapToInt8(f func(*string) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlice) MapToRune(f func(string) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlicePtrs) MapToRune(f func(*string) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlice) MapToString(f func(string) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlicePtrs) MapToString(f func(*string) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlice) MapToUint(f func(string) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlicePtrs) MapToUint(f func(*string) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlice) MapToUint16(f func(string) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlicePtrs) MapToUint16(f func(*string) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlice) MapToUint32(f func(string) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlicePtrs) MapToUint32(f func(*string) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlice) MapToUint64(f func(string) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlicePtrs) MapToUint64(f func(*string) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlice) MapToUint8(f func(string) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlicePtrs) MapToUint8(f func(*string) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlice) MapToUintptr(f func(string) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice StringSlicePtrs) MapToUintptr(f func(*string) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlice) MapToBool(f func(uint) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlicePtrs) MapToBool(f func(*uint) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlice) MapToByte(f func(uint) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlicePtrs) MapToByte(f func(*uint) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlice) MapToComplex128(f func(uint) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlicePtrs) MapToComplex128(f func(*uint) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlice) MapToComplex64(f func(uint) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlicePtrs) MapToComplex64(f func(*uint) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlice) MapToError(f func(uint) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlicePtrs) MapToError(f func(*uint) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlice) MapToFloat32(f func(uint) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlicePtrs) MapToFloat32(f func(*uint) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlice) MapToFloat64(f func(uint) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlicePtrs) MapToFloat64(f func(*uint) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlice) MapToInt(f func(uint) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlicePtrs) MapToInt(f func(*uint) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlice) MapToInt16(f func(uint) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlicePtrs) MapToInt16(f func(*uint) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlice) MapToInt32(f func(uint) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlicePtrs) MapToInt32(f func(*uint) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlice) MapToInt64(f func(uint) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlicePtrs) MapToInt64(f func(*uint) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlice) MapToInt8(f func(uint) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlicePtrs) MapToInt8(f func(*uint) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlice) MapToRune(f func(uint) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlicePtrs) MapToRune(f func(*uint) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlice) MapToString(f func(uint) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlicePtrs) MapToString(f func(*uint) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlice) MapToUint(f func(uint) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlicePtrs) MapToUint(f func(*uint) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlice) MapToUint16(f func(uint) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlicePtrs) MapToUint16(f func(*uint) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlice) MapToUint32(f func(uint) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlicePtrs) MapToUint32(f func(*uint) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlice) MapToUint64(f func(uint) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlicePtrs) MapToUint64(f func(*uint) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlice) MapToUint8(f func(uint) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlicePtrs) MapToUint8(f func(*uint) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlice) MapToUintptr(f func(uint) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintSlicePtrs) MapToUintptr(f func(*uint) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16Slice) MapToBool(f func(uint16) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16SlicePtrs) MapToBool(f func(*uint16) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16Slice) MapToByte(f func(uint16) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16SlicePtrs) MapToByte(f func(*uint16) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16Slice) MapToComplex128(f func(uint16) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16SlicePtrs) MapToComplex128(f func(*uint16) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16Slice) MapToComplex64(f func(uint16) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16SlicePtrs) MapToComplex64(f func(*uint16) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16Slice) MapToError(f func(uint16) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16SlicePtrs) MapToError(f func(*uint16) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16Slice) MapToFloat32(f func(uint16) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16SlicePtrs) MapToFloat32(f func(*uint16) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16Slice) MapToFloat64(f func(uint16) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16SlicePtrs) MapToFloat64(f func(*uint16) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16Slice) MapToInt(f func(uint16) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16SlicePtrs) MapToInt(f func(*uint16) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16Slice) MapToInt16(f func(uint16) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16SlicePtrs) MapToInt16(f func(*uint16) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16Slice) MapToInt32(f func(uint16) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16SlicePtrs) MapToInt32(f func(*uint16) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16Slice) MapToInt64(f func(uint16) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16SlicePtrs) MapToInt64(f func(*uint16) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16Slice) MapToInt8(f func(uint16) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16SlicePtrs) MapToInt8(f func(*uint16) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16Slice) MapToRune(f func(uint16) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16SlicePtrs) MapToRune(f func(*uint16) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16Slice) MapToString(f func(uint16) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16SlicePtrs) MapToString(f func(*uint16) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16Slice) MapToUint(f func(uint16) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16SlicePtrs) MapToUint(f func(*uint16) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16Slice) MapToUint16(f func(uint16) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16SlicePtrs) MapToUint16(f func(*uint16) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16Slice) MapToUint32(f func(uint16) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16SlicePtrs) MapToUint32(f func(*uint16) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16Slice) MapToUint64(f func(uint16) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16SlicePtrs) MapToUint64(f func(*uint16) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16Slice) MapToUint8(f func(uint16) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16SlicePtrs) MapToUint8(f func(*uint16) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16Slice) MapToUintptr(f func(uint16) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint16SlicePtrs) MapToUintptr(f func(*uint16) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32Slice) MapToBool(f func(uint32) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32SlicePtrs) MapToBool(f func(*uint32) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32Slice) MapToByte(f func(uint32) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32SlicePtrs) MapToByte(f func(*uint32) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32Slice) MapToComplex128(f func(uint32) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32SlicePtrs) MapToComplex128(f func(*uint32) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32Slice) MapToComplex64(f func(uint32) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32SlicePtrs) MapToComplex64(f func(*uint32) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32Slice) MapToError(f func(uint32) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32SlicePtrs) MapToError(f func(*uint32) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32Slice) MapToFloat32(f func(uint32) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32SlicePtrs) MapToFloat32(f func(*uint32) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32Slice) MapToFloat64(f func(uint32) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32SlicePtrs) MapToFloat64(f func(*uint32) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32Slice) MapToInt(f func(uint32) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32SlicePtrs) MapToInt(f func(*uint32) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32Slice) MapToInt16(f func(uint32) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32SlicePtrs) MapToInt16(f func(*uint32) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32Slice) MapToInt32(f func(uint32) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32SlicePtrs) MapToInt32(f func(*uint32) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32Slice) MapToInt64(f func(uint32) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32SlicePtrs) MapToInt64(f func(*uint32) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32Slice) MapToInt8(f func(uint32) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32SlicePtrs) MapToInt8(f func(*uint32) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32Slice) MapToRune(f func(uint32) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32SlicePtrs) MapToRune(f func(*uint32) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32Slice) MapToString(f func(uint32) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32SlicePtrs) MapToString(f func(*uint32) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32Slice) MapToUint(f func(uint32) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32SlicePtrs) MapToUint(f func(*uint32) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32Slice) MapToUint16(f func(uint32) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32SlicePtrs) MapToUint16(f func(*uint32) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32Slice) MapToUint32(f func(uint32) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32SlicePtrs) MapToUint32(f func(*uint32) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32Slice) MapToUint64(f func(uint32) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32SlicePtrs) MapToUint64(f func(*uint32) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32Slice) MapToUint8(f func(uint32) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32SlicePtrs) MapToUint8(f func(*uint32) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32Slice) MapToUintptr(f func(uint32) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint32SlicePtrs) MapToUintptr(f func(*uint32) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64Slice) MapToBool(f func(uint64) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64SlicePtrs) MapToBool(f func(*uint64) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64Slice) MapToByte(f func(uint64) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64SlicePtrs) MapToByte(f func(*uint64) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64Slice) MapToComplex128(f func(uint64) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64SlicePtrs) MapToComplex128(f func(*uint64) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64Slice) MapToComplex64(f func(uint64) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64SlicePtrs) MapToComplex64(f func(*uint64) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64Slice) MapToError(f func(uint64) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64SlicePtrs) MapToError(f func(*uint64) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64Slice) MapToFloat32(f func(uint64) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64SlicePtrs) MapToFloat32(f func(*uint64) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64Slice) MapToFloat64(f func(uint64) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64SlicePtrs) MapToFloat64(f func(*uint64) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64Slice) MapToInt(f func(uint64) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64SlicePtrs) MapToInt(f func(*uint64) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64Slice) MapToInt16(f func(uint64) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64SlicePtrs) MapToInt16(f func(*uint64) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64Slice) MapToInt32(f func(uint64) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64SlicePtrs) MapToInt32(f func(*uint64) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64Slice) MapToInt64(f func(uint64) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64SlicePtrs) MapToInt64(f func(*uint64) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64Slice) MapToInt8(f func(uint64) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64SlicePtrs) MapToInt8(f func(*uint64) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64Slice) MapToRune(f func(uint64) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64SlicePtrs) MapToRune(f func(*uint64) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64Slice) MapToString(f func(uint64) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64SlicePtrs) MapToString(f func(*uint64) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64Slice) MapToUint(f func(uint64) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64SlicePtrs) MapToUint(f func(*uint64) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64Slice) MapToUint16(f func(uint64) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64SlicePtrs) MapToUint16(f func(*uint64) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64Slice) MapToUint32(f func(uint64) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64SlicePtrs) MapToUint32(f func(*uint64) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64Slice) MapToUint64(f func(uint64) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64SlicePtrs) MapToUint64(f func(*uint64) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64Slice) MapToUint8(f func(uint64) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64SlicePtrs) MapToUint8(f func(*uint64) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64Slice) MapToUintptr(f func(uint64) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint64SlicePtrs) MapToUintptr(f func(*uint64) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8Slice) MapToBool(f func(uint8) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8SlicePtrs) MapToBool(f func(*uint8) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8Slice) MapToByte(f func(uint8) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8SlicePtrs) MapToByte(f func(*uint8) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8Slice) MapToComplex128(f func(uint8) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8SlicePtrs) MapToComplex128(f func(*uint8) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8Slice) MapToComplex64(f func(uint8) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8SlicePtrs) MapToComplex64(f func(*uint8) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8Slice) MapToError(f func(uint8) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8SlicePtrs) MapToError(f func(*uint8) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8Slice) MapToFloat32(f func(uint8) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8SlicePtrs) MapToFloat32(f func(*uint8) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8Slice) MapToFloat64(f func(uint8) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8SlicePtrs) MapToFloat64(f func(*uint8) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8Slice) MapToInt(f func(uint8) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8SlicePtrs) MapToInt(f func(*uint8) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8Slice) MapToInt16(f func(uint8) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8SlicePtrs) MapToInt16(f func(*uint8) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8Slice) MapToInt32(f func(uint8) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8SlicePtrs) MapToInt32(f func(*uint8) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8Slice) MapToInt64(f func(uint8) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8SlicePtrs) MapToInt64(f func(*uint8) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8Slice) MapToInt8(f func(uint8) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8SlicePtrs) MapToInt8(f func(*uint8) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8Slice) MapToRune(f func(uint8) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8SlicePtrs) MapToRune(f func(*uint8) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8Slice) MapToString(f func(uint8) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8SlicePtrs) MapToString(f func(*uint8) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8Slice) MapToUint(f func(uint8) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8SlicePtrs) MapToUint(f func(*uint8) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8Slice) MapToUint16(f func(uint8) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8SlicePtrs) MapToUint16(f func(*uint8) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8Slice) MapToUint32(f func(uint8) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8SlicePtrs) MapToUint32(f func(*uint8) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8Slice) MapToUint64(f func(uint8) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8SlicePtrs) MapToUint64(f func(*uint8) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8Slice) MapToUint8(f func(uint8) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8SlicePtrs) MapToUint8(f func(*uint8) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8Slice) MapToUintptr(f func(uint8) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice Uint8SlicePtrs) MapToUintptr(f func(*uint8) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlice) MapToBool(f func(uintptr) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlicePtrs) MapToBool(f func(*uintptr) bool) []bool {
	out := []bool{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlice) MapToByte(f func(uintptr) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlicePtrs) MapToByte(f func(*uintptr) byte) []byte {
	out := []byte{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlice) MapToComplex128(f func(uintptr) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlicePtrs) MapToComplex128(f func(*uintptr) complex128) []complex128 {
	out := []complex128{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlice) MapToComplex64(f func(uintptr) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlicePtrs) MapToComplex64(f func(*uintptr) complex64) []complex64 {
	out := []complex64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlice) MapToError(f func(uintptr) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlicePtrs) MapToError(f func(*uintptr) error) []error {
	out := []error{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlice) MapToFloat32(f func(uintptr) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlicePtrs) MapToFloat32(f func(*uintptr) float32) []float32 {
	out := []float32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlice) MapToFloat64(f func(uintptr) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlicePtrs) MapToFloat64(f func(*uintptr) float64) []float64 {
	out := []float64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlice) MapToInt(f func(uintptr) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlicePtrs) MapToInt(f func(*uintptr) int) []int {
	out := []int{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlice) MapToInt16(f func(uintptr) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlicePtrs) MapToInt16(f func(*uintptr) int16) []int16 {
	out := []int16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlice) MapToInt32(f func(uintptr) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlicePtrs) MapToInt32(f func(*uintptr) int32) []int32 {
	out := []int32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlice) MapToInt64(f func(uintptr) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlicePtrs) MapToInt64(f func(*uintptr) int64) []int64 {
	out := []int64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlice) MapToInt8(f func(uintptr) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlicePtrs) MapToInt8(f func(*uintptr) int8) []int8 {
	out := []int8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlice) MapToRune(f func(uintptr) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlicePtrs) MapToRune(f func(*uintptr) rune) []rune {
	out := []rune{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlice) MapToString(f func(uintptr) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlicePtrs) MapToString(f func(*uintptr) string) []string {
	out := []string{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlice) MapToUint(f func(uintptr) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlicePtrs) MapToUint(f func(*uintptr) uint) []uint {
	out := []uint{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlice) MapToUint16(f func(uintptr) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlicePtrs) MapToUint16(f func(*uintptr) uint16) []uint16 {
	out := []uint16{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlice) MapToUint32(f func(uintptr) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlicePtrs) MapToUint32(f func(*uintptr) uint32) []uint32 {
	out := []uint32{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlice) MapToUint64(f func(uintptr) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlicePtrs) MapToUint64(f func(*uintptr) uint64) []uint64 {
	out := []uint64{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlice) MapToUint8(f func(uintptr) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlicePtrs) MapToUint8(f func(*uintptr) uint8) []uint8 {
	out := []uint8{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlice) MapToUintptr(f func(uintptr) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}

func (slice UintptrSlicePtrs) MapToUintptr(f func(*uintptr) uintptr) []uintptr {
	out := []uintptr{}
	for _, item := range slice {
		out = append(out, f(item))
	}

	return out
}
